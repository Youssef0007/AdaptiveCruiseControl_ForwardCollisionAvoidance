
ADAS_V1_AfterUpdates.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004984  08004984  00005984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a30  08004a30  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  08004a30  08004a30  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a30  08004a30  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00005a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004a38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  20000060  08004a98  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e0  08004a98  000062e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133d0  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319a  00000000  00000000  00019459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6e  00000000  00000000  0001d758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877b  00000000  00000000  0001e4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014958  00000000  00000000  00036c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901ed  00000000  00000000  0004b599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004958  00000000  00000000  000db7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e0124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800496c 	.word	0x0800496c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800496c 	.word	0x0800496c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000008c 	.word	0x2000008c
 800017c:	2000012c 	.word	0x2000012c

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000186:	4b1d      	ldr	r3, [pc, #116]	@ (80001fc <MX_FREERTOS_Init+0x7c>)
 8000188:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800018c:	461d      	mov	r5, r3
 800018e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000192:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800019a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f003 f90f 	bl	80033c4 <osThreadCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a15      	ldr	r2, [pc, #84]	@ (8000200 <MX_FREERTOS_Init+0x80>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, T1_FCW_FCA_BA, osPriorityHigh, 0, 128);
 80001ac:	4b15      	ldr	r3, [pc, #84]	@ (8000204 <MX_FREERTOS_Init+0x84>)
 80001ae:	f107 0420 	add.w	r4, r7, #32
 80001b2:	461d      	mov	r5, r3
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001c0:	f107 0320 	add.w	r3, r7, #32
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f003 f8fc 	bl	80033c4 <osThreadCreate>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000208 <MX_FREERTOS_Init+0x88>)
 80001d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, T3_MotionDrive, osPriorityRealtime, 0, 128);
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <MX_FREERTOS_Init+0x8c>)
 80001d4:	1d3c      	adds	r4, r7, #4
 80001d6:	461d      	mov	r5, r3
 80001d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f003 f8eb 	bl	80033c4 <osThreadCreate>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a07      	ldr	r2, [pc, #28]	@ (8000210 <MX_FREERTOS_Init+0x90>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001f4:	bf00      	nop
 80001f6:	3758      	adds	r7, #88	@ 0x58
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bdb0      	pop	{r4, r5, r7, pc}
 80001fc:	08004990 	.word	0x08004990
 8000200:	20000080 	.word	0x20000080
 8000204:	080049b8 	.word	0x080049b8
 8000208:	20000084 	.word	0x20000084
 800020c:	080049e0 	.word	0x080049e0
 8000210:	20000088 	.word	0x20000088

08000214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800021c:	2001      	movs	r0, #1
 800021e:	f003 f91d 	bl	800345c <osDelay>
 8000222:	e7fb      	b.n	800021c <StartDefaultTask+0x8>

08000224 <T1_FCW_FCA_BA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_T1_FCW_FCA_BA */
void T1_FCW_FCA_BA(void const * argument)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	  //	  	}
	  //	  	else
	  //	  	{
	  //	  		/*Do nothing*/
	  //	  	}
    osDelay(1);
 800022c:	2001      	movs	r0, #1
 800022e:	f003 f915 	bl	800345c <osDelay>
 8000232:	e7fb      	b.n	800022c <T1_FCW_FCA_BA+0x8>

08000234 <T3_MotionDrive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_T3_MotionDrive */
void T3_MotionDrive(void const * argument)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN T3_MotionDrive */
	  /* Infinite loop */
	motion_Direction = 's';
 800023c:	4b25      	ldr	r3, [pc, #148]	@ (80002d4 <T3_MotionDrive+0xa0>)
 800023e:	2273      	movs	r2, #115	@ 0x73
 8000240:	701a      	strb	r2, [r3, #0]
	motion_PWM =0;
 8000242:	4b25      	ldr	r3, [pc, #148]	@ (80002d8 <T3_MotionDrive+0xa4>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	  /*Take Bluetooth_Semaphore that was given by the UART_Interrupt receiving input from user
	 	   * then its allowed to control the car via app controller */
	 	  /* if event receive from Bluetooth is given by interrupt callback function of UART*/
	 		switch (motion_Direction) {
 8000248:	4b22      	ldr	r3, [pc, #136]	@ (80002d4 <T3_MotionDrive+0xa0>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	3b62      	subs	r3, #98	@ 0x62
 800024e:	2b11      	cmp	r3, #17
 8000250:	d835      	bhi.n	80002be <T3_MotionDrive+0x8a>
 8000252:	a201      	add	r2, pc, #4	@ (adr r2, 8000258 <T3_MotionDrive+0x24>)
 8000254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000258:	080002a7 	.word	0x080002a7
 800025c:	080002bf 	.word	0x080002bf
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002bf 	.word	0x080002bf
 8000268:	080002a1 	.word	0x080002a1
 800026c:	080002bf 	.word	0x080002bf
 8000270:	080002bf 	.word	0x080002bf
 8000274:	080002bf 	.word	0x080002bf
 8000278:	080002bf 	.word	0x080002bf
 800027c:	080002bf 	.word	0x080002bf
 8000280:	080002ad 	.word	0x080002ad
 8000284:	080002bf 	.word	0x080002bf
 8000288:	080002bf 	.word	0x080002bf
 800028c:	080002bf 	.word	0x080002bf
 8000290:	080002bf 	.word	0x080002bf
 8000294:	080002bf 	.word	0x080002bf
 8000298:	080002b3 	.word	0x080002b3
 800029c:	080002b9 	.word	0x080002b9
	 	  	case MOVE_FORWARD:
	 	  		Forward();
 80002a0:	f000 f91c 	bl	80004dc <Forward>
	 	  		break;
 80002a4:	e00c      	b.n	80002c0 <T3_MotionDrive+0x8c>
	 	  	case MOVE_BACKWARD:
	 	  		Backward();
 80002a6:	f000 f933 	bl	8000510 <Backward>
	 	  		break;
 80002aa:	e009      	b.n	80002c0 <T3_MotionDrive+0x8c>
	 	  	case MOVE_LEFT:
	 	  		Left();
 80002ac:	f000 f964 	bl	8000578 <Left>
	 	  		break;
 80002b0:	e006      	b.n	80002c0 <T3_MotionDrive+0x8c>
	 	  	case MOVE_RIGHT:
	 	  		Right();
 80002b2:	f000 f947 	bl	8000544 <Right>
	 	  		break;
 80002b6:	e003      	b.n	80002c0 <T3_MotionDrive+0x8c>
	 	  	case STOP:
	 	  		Stop();
 80002b8:	f000 f8f6 	bl	80004a8 <Stop>
	 	  		break;
 80002bc:	e000      	b.n	80002c0 <T3_MotionDrive+0x8c>
	 	  	default:
	 	  		break;
 80002be:	bf00      	nop
	 	  	}
	 		/*update the PWM value*/
	 		//sConfigOC.Pulse = motion_PWM;
	 		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,motion_PWM); //TIM1-> CCR1 = motion_PWM;
 80002c0:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <T3_MotionDrive+0xa4>)
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <T3_MotionDrive+0xa8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34


//	 	  }

    osDelay(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f003 f8c6 	bl	800345c <osDelay>
	 		switch (motion_Direction) {
 80002d0:	e7ba      	b.n	8000248 <T3_MotionDrive+0x14>
 80002d2:	bf00      	nop
 80002d4:	2000007c 	.word	0x2000007c
 80002d8:	2000007d 	.word	0x2000007d
 80002dc:	20000378 	.word	0x20000378

080002e0 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]

	if(g_key<50){
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <HAL_UART_RxCpltCallback+0x34>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b31      	cmp	r3, #49	@ 0x31
 80002ee:	d804      	bhi.n	80002fa <HAL_UART_RxCpltCallback+0x1a>
		motion_PWM=g_key;
 80002f0:	4b08      	ldr	r3, [pc, #32]	@ (8000314 <HAL_UART_RxCpltCallback+0x34>)
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <HAL_UART_RxCpltCallback+0x38>)
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	e003      	b.n	8000302 <HAL_UART_RxCpltCallback+0x22>
	}
	else{
		motion_Direction=g_key;
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <HAL_UART_RxCpltCallback+0x34>)
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b07      	ldr	r3, [pc, #28]	@ (800031c <HAL_UART_RxCpltCallback+0x3c>)
 8000300:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, &g_key,1);
 8000302:	2201      	movs	r2, #1
 8000304:	4903      	ldr	r1, [pc, #12]	@ (8000314 <HAL_UART_RxCpltCallback+0x34>)
 8000306:	4806      	ldr	r0, [pc, #24]	@ (8000320 <HAL_UART_RxCpltCallback+0x40>)
 8000308:	f002 fb07 	bl	800291a <HAL_UART_Receive_IT>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000032c 	.word	0x2000032c
 8000318:	2000007d 	.word	0x2000007d
 800031c:	2000007c 	.word	0x2000007c
 8000320:	200003c0 	.word	0x200003c0

08000324 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <MX_GPIO_Init+0x74>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a16      	ldr	r2, [pc, #88]	@ (8000398 <MX_GPIO_Init+0x74>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <MX_GPIO_Init+0x74>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0320 	and.w	r3, r3, #32
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_GPIO_Init+0x74>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a10      	ldr	r2, [pc, #64]	@ (8000398 <MX_GPIO_Init+0x74>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_GPIO_Init+0x74>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_DIRECTION_MOTOR_Pin|IN2_DIRECTION_MOTOR_Pin|IN3_DRIVE_MOTOR_Pin|IN4_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	21f0      	movs	r1, #240	@ 0xf0
 800036c:	480b      	ldr	r0, [pc, #44]	@ (800039c <MX_GPIO_Init+0x78>)
 800036e:	f000 ff51 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN1_DIRECTION_MOTOR_Pin|IN2_DIRECTION_MOTOR_Pin|IN3_DRIVE_MOTOR_Pin|IN4_DRIVE_MOTOR_Pin;
 8000372:	23f0      	movs	r3, #240	@ 0xf0
 8000374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2302      	movs	r3, #2
 8000380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	4619      	mov	r1, r3
 8000388:	4804      	ldr	r0, [pc, #16]	@ (800039c <MX_GPIO_Init+0x78>)
 800038a:	f000 fdc7 	bl	8000f1c <HAL_GPIO_Init>

}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000
 800039c:	40010800 	.word	0x40010800

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fbf6 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f820 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f7ff ffba 	bl	8000324 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003b0:	f000 f9f0 	bl	8000794 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80003b4:	f000 fb0a 	bl	80009cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003b8:	f000 fade 	bl	8000978 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &g_Action, 1);	// start the uart to receive with interrupt
 80003bc:	2201      	movs	r2, #1
 80003be:	4907      	ldr	r1, [pc, #28]	@ (80003dc <main+0x3c>)
 80003c0:	4807      	ldr	r0, [pc, #28]	@ (80003e0 <main+0x40>)
 80003c2:	f002 faaa 	bl	800291a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &g_key, 1);	// start the uart to receive with interrupt
 80003c6:	2201      	movs	r2, #1
 80003c8:	4906      	ldr	r1, [pc, #24]	@ (80003e4 <main+0x44>)
 80003ca:	4807      	ldr	r0, [pc, #28]	@ (80003e8 <main+0x48>)
 80003cc:	f002 faa5 	bl	800291a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80003d0:	f7ff fed6 	bl	8000180 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003d4:	f002 ffef 	bl	80033b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <main+0x38>
 80003dc:	2000032d 	.word	0x2000032d
 80003e0:	200003c0 	.word	0x200003c0
 80003e4:	2000032c 	.word	0x2000032c
 80003e8:	20000408 	.word	0x20000408

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	@ 0x40
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2228      	movs	r2, #40	@ 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f004 f9de 	bl	80047bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040e:	2301      	movs	r3, #1
 8000410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000412:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041c:	2301      	movs	r3, #1
 800041e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000420:	2302      	movs	r3, #2
 8000422:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000428:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800042e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	4618      	mov	r0, r3
 8000436:	f000 ff05 	bl	8001244 <HAL_RCC_OscConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000440:	f000 f82c 	bl	800049c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	230f      	movs	r3, #15
 8000446:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	2302      	movs	r3, #2
 800044a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2102      	movs	r1, #2
 800045e:	4618      	mov	r0, r3
 8000460:	f001 f972 	bl	8001748 <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800046a:	f000 f817 	bl	800049c <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3740      	adds	r7, #64	@ 0x40
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d101      	bne.n	800048e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048a:	f000 fb99 	bl	8000bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40000400 	.word	0x40000400

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <Error_Handler+0x8>

080004a8 <Stop>:



#include "motor_Interf.h"

void Stop(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_DIRECTION_MOTOR_GPIO_Port, IN1_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2110      	movs	r1, #16
 80004b0:	4809      	ldr	r0, [pc, #36]	@ (80004d8 <Stop+0x30>)
 80004b2:	f000 feaf 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_DIRECTION_MOTOR_GPIO_Port, IN2_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	4807      	ldr	r0, [pc, #28]	@ (80004d8 <Stop+0x30>)
 80004bc:	f000 feaa 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_DRIVE_MOTOR_GPIO_Port, IN3_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2140      	movs	r1, #64	@ 0x40
 80004c4:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <Stop+0x30>)
 80004c6:	f000 fea5 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_DRIVE_MOTOR_GPIO_Port, IN4_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2180      	movs	r1, #128	@ 0x80
 80004ce:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <Stop+0x30>)
 80004d0:	f000 fea0 	bl	8001214 <HAL_GPIO_WritePin>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010800 	.word	0x40010800

080004dc <Forward>:

void Forward(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* IN3 = 1 , IN4 = 0*/
	HAL_GPIO_WritePin(IN3_DRIVE_MOTOR_GPIO_Port, IN3_DRIVE_MOTOR_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2140      	movs	r1, #64	@ 0x40
 80004e4:	4809      	ldr	r0, [pc, #36]	@ (800050c <Forward+0x30>)
 80004e6:	f000 fe95 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_DRIVE_MOTOR_GPIO_Port, IN4_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	4807      	ldr	r0, [pc, #28]	@ (800050c <Forward+0x30>)
 80004f0:	f000 fe90 	bl	8001214 <HAL_GPIO_WritePin>

	/*IN1 = 0 , IN2 = 0*/
	// Stopping the front motor
	HAL_GPIO_WritePin(IN1_DIRECTION_MOTOR_GPIO_Port, IN1_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2110      	movs	r1, #16
 80004f8:	4804      	ldr	r0, [pc, #16]	@ (800050c <Forward+0x30>)
 80004fa:	f000 fe8b 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_DIRECTION_MOTOR_GPIO_Port, IN2_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2120      	movs	r1, #32
 8000502:	4802      	ldr	r0, [pc, #8]	@ (800050c <Forward+0x30>)
 8000504:	f000 fe86 	bl	8001214 <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40010800 	.word	0x40010800

08000510 <Backward>:

void Backward(){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0


	/*IN3 = 0 , IN4 = 1*/
	HAL_GPIO_WritePin(IN3_DRIVE_MOTOR_GPIO_Port, IN3_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2140      	movs	r1, #64	@ 0x40
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <Backward+0x30>)
 800051a:	f000 fe7b 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_DRIVE_MOTOR_GPIO_Port, IN4_DRIVE_MOTOR_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <Backward+0x30>)
 8000524:	f000 fe76 	bl	8001214 <HAL_GPIO_WritePin>



	/*IN1 = 0 , IN2 = 0*/
	// Stopping the front motor
	HAL_GPIO_WritePin(IN1_DIRECTION_MOTOR_GPIO_Port, IN1_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2110      	movs	r1, #16
 800052c:	4804      	ldr	r0, [pc, #16]	@ (8000540 <Backward+0x30>)
 800052e:	f000 fe71 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_DIRECTION_MOTOR_GPIO_Port, IN2_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2120      	movs	r1, #32
 8000536:	4802      	ldr	r0, [pc, #8]	@ (8000540 <Backward+0x30>)
 8000538:	f000 fe6c 	bl	8001214 <HAL_GPIO_WritePin>

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010800 	.word	0x40010800

08000544 <Right>:

void Right(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

	/*IN1 = 1 , IN2 = 0*/
	HAL_GPIO_WritePin(IN1_DIRECTION_MOTOR_GPIO_Port, IN1_DIRECTION_MOTOR_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	4809      	ldr	r0, [pc, #36]	@ (8000574 <Right+0x30>)
 800054e:	f000 fe61 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_DIRECTION_MOTOR_GPIO_Port, IN2_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	4807      	ldr	r0, [pc, #28]	@ (8000574 <Right+0x30>)
 8000558:	f000 fe5c 	bl	8001214 <HAL_GPIO_WritePin>

	/* IN3 = 1 , IN4 = 0*/
	HAL_GPIO_WritePin(IN3_DRIVE_MOTOR_GPIO_Port, IN3_DRIVE_MOTOR_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2140      	movs	r1, #64	@ 0x40
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <Right+0x30>)
 8000562:	f000 fe57 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_DRIVE_MOTOR_GPIO_Port, IN4_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	4802      	ldr	r0, [pc, #8]	@ (8000574 <Right+0x30>)
 800056c:	f000 fe52 	bl	8001214 <HAL_GPIO_WritePin>

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010800 	.word	0x40010800

08000578 <Left>:

void Left(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	/*IN1 = 0 , IN2 = 1*/
	HAL_GPIO_WritePin(IN1_DIRECTION_MOTOR_GPIO_Port, IN1_DIRECTION_MOTOR_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2110      	movs	r1, #16
 8000580:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <Left+0x30>)
 8000582:	f000 fe47 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_DIRECTION_MOTOR_GPIO_Port, IN2_DIRECTION_MOTOR_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2120      	movs	r1, #32
 800058a:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <Left+0x30>)
 800058c:	f000 fe42 	bl	8001214 <HAL_GPIO_WritePin>

	/* IN3 = 1 , IN4 = 0*/
	HAL_GPIO_WritePin(IN3_DRIVE_MOTOR_GPIO_Port, IN3_DRIVE_MOTOR_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2140      	movs	r1, #64	@ 0x40
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <Left+0x30>)
 8000596:	f000 fe3d 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_DRIVE_MOTOR_GPIO_Port, IN4_DRIVE_MOTOR_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2180      	movs	r1, #128	@ 0x80
 800059e:	4802      	ldr	r0, [pc, #8]	@ (80005a8 <Left+0x30>)
 80005a0:	f000 fe38 	bl	8001214 <HAL_GPIO_WritePin>

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40010800 	.word	0x40010800

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_MspInit+0x68>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a17      	ldr	r2, [pc, #92]	@ (8000614 <HAL_MspInit+0x68>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_MspInit+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_MspInit+0x68>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <HAL_MspInit+0x68>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x68>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	210f      	movs	r1, #15
 80005e6:	f06f 0001 	mvn.w	r0, #1
 80005ea:	f000 fbba 	bl	8000d62 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_MspInit+0x6c>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <HAL_MspInit+0x6c>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	40010000 	.word	0x40010000

0800061c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	@ 0x38
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800062c:	2300      	movs	r3, #0
 800062e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <HAL_InitTick+0xe8>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a33      	ldr	r2, [pc, #204]	@ (8000704 <HAL_InitTick+0xe8>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <HAL_InitTick+0xe8>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800064a:	f107 0210 	add.w	r2, r7, #16
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f9e7 	bl	8001a28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800065e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000664:	f001 f9b8 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8000668:	6378      	str	r0, [r7, #52]	@ 0x34
 800066a:	e004      	b.n	8000676 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800066c:	f001 f9b4 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8000670:	4603      	mov	r3, r0
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000678:	4a23      	ldr	r2, [pc, #140]	@ (8000708 <HAL_InitTick+0xec>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	0c9b      	lsrs	r3, r3, #18
 8000680:	3b01      	subs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <HAL_InitTick+0xf0>)
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <HAL_InitTick+0xf4>)
 8000688:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <HAL_InitTick+0xf0>)
 800068c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000690:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000692:	4a1e      	ldr	r2, [pc, #120]	@ (800070c <HAL_InitTick+0xf0>)
 8000694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000696:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <HAL_InitTick+0xf0>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <HAL_InitTick+0xf0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <HAL_InitTick+0xf0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006aa:	4818      	ldr	r0, [pc, #96]	@ (800070c <HAL_InitTick+0xf0>)
 80006ac:	f001 fa0a 	bl	8001ac4 <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80006b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11b      	bne.n	80006f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80006be:	4813      	ldr	r0, [pc, #76]	@ (800070c <HAL_InitTick+0xf0>)
 80006c0:	f001 fa50 	bl	8001b64 <HAL_TIM_Base_Start_IT>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80006ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d111      	bne.n	80006f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006d2:	201d      	movs	r0, #29
 80006d4:	f000 fb61 	bl	8000d9a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d808      	bhi.n	80006f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80006de:	2200      	movs	r2, #0
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	201d      	movs	r0, #29
 80006e4:	f000 fb3d 	bl	8000d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <HAL_InitTick+0xf8>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	e002      	b.n	80006f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3738      	adds	r7, #56	@ 0x38
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	431bde83 	.word	0x431bde83
 800070c:	20000330 	.word	0x20000330
 8000710:	40000400 	.word	0x40000400
 8000714:	20000004 	.word	0x20000004

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <NMI_Handler+0x4>

08000720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <MemManage_Handler+0x4>

08000730 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <UsageFault_Handler+0x4>

08000740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000750:	4802      	ldr	r0, [pc, #8]	@ (800075c <TIM3_IRQHandler+0x10>)
 8000752:	f001 faab 	bl	8001cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000330 	.word	0x20000330

08000760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000764:	4802      	ldr	r0, [pc, #8]	@ (8000770 <USART1_IRQHandler+0x10>)
 8000766:	f002 f8fd 	bl	8002964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200003c0 	.word	0x200003c0

08000774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <USART2_IRQHandler+0x10>)
 800077a:	f002 f8f3 	bl	8002964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000408 	.word	0x20000408

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b096      	sub	sp, #88	@ 0x58
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2220      	movs	r2, #32
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fff5 	bl	80047bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d2:	4b3e      	ldr	r3, [pc, #248]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007d4:	4a3e      	ldr	r2, [pc, #248]	@ (80008d0 <MX_TIM1_Init+0x13c>)
 80007d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80007d8:	4b3c      	ldr	r3, [pc, #240]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007da:	2247      	movs	r2, #71	@ 0x47
 80007dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b3b      	ldr	r3, [pc, #236]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80007e4:	4b39      	ldr	r3, [pc, #228]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007e6:	2263      	movs	r2, #99	@ 0x63
 80007e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b38      	ldr	r3, [pc, #224]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f0:	4b36      	ldr	r3, [pc, #216]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f6:	4b35      	ldr	r3, [pc, #212]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007f8:	2280      	movs	r2, #128	@ 0x80
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007fc:	4833      	ldr	r0, [pc, #204]	@ (80008cc <MX_TIM1_Init+0x138>)
 80007fe:	f001 f961 	bl	8001ac4 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000808:	f7ff fe48 	bl	800049c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000810:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000816:	4619      	mov	r1, r3
 8000818:	482c      	ldr	r0, [pc, #176]	@ (80008cc <MX_TIM1_Init+0x138>)
 800081a:	f001 fc11 	bl	8002040 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000824:	f7ff fe3a 	bl	800049c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000828:	4828      	ldr	r0, [pc, #160]	@ (80008cc <MX_TIM1_Init+0x138>)
 800082a:	f001 f9e7 	bl	8001bfc <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000834:	f7ff fe32 	bl	800049c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000844:	4619      	mov	r1, r3
 8000846:	4821      	ldr	r0, [pc, #132]	@ (80008cc <MX_TIM1_Init+0x138>)
 8000848:	f001 ff5c 	bl	8002704 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000852:	f7ff fe23 	bl	800049c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	@ 0x60
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <MX_TIM1_Init+0x138>)
 800087c:	f001 fb1e 	bl	8001ebc <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000886:	f7ff fe09 	bl	800049c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <MX_TIM1_Init+0x138>)
 80008ae:	f001 ff81 	bl	80027b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80008b8:	f7ff fdf0 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <MX_TIM1_Init+0x138>)
 80008be:	f000 f827 	bl	8000910 <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3758      	adds	r7, #88	@ 0x58
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000378 	.word	0x20000378
 80008d0:	40012c00 	.word	0x40012c00

080008d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a09      	ldr	r2, [pc, #36]	@ (8000908 <HAL_TIM_Base_MspInit+0x34>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d10b      	bne.n	80008fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <HAL_TIM_Base_MspInit+0x38>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_TIM_Base_MspInit+0x38>)
 80008ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_TIM_Base_MspInit+0x38>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008fe:	bf00      	nop
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40012c00 	.word	0x40012c00
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a10      	ldr	r2, [pc, #64]	@ (800096c <HAL_TIM_MspPostInit+0x5c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d118      	bne.n	8000962 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_TIM_MspPostInit+0x60>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_TIM_MspPostInit+0x60>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_TIM_MspPostInit+0x60>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800094c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2302      	movs	r3, #2
 8000954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0310 	add.w	r3, r7, #16
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HAL_TIM_MspPostInit+0x64>)
 800095e:	f000 fadd 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40012c00 	.word	0x40012c00
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800

08000978 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_USART1_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f001 ff63 	bl	800287a <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f7ff fd6f 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200003c0 	.word	0x200003c0
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	@ (8000a1c <MX_USART2_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f001 ff39 	bl	800287a <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f7ff fd45 	bl	800049c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000408 	.word	0x20000408
 8000a1c:	40004400 	.word	0x40004400

08000a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b38 <HAL_UART_MspInit+0x118>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d13a      	bne.n	8000ab6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a40:	4b3e      	ldr	r3, [pc, #248]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a3d      	ldr	r2, [pc, #244]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b38      	ldr	r3, [pc, #224]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a37      	ldr	r2, [pc, #220]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b35      	ldr	r3, [pc, #212]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4619      	mov	r1, r3
 8000a84:	482e      	ldr	r0, [pc, #184]	@ (8000b40 <HAL_UART_MspInit+0x120>)
 8000a86:	f000 fa49 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4828      	ldr	r0, [pc, #160]	@ (8000b40 <HAL_UART_MspInit+0x120>)
 8000aa0:	f000 fa3c 	bl	8000f1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	2025      	movs	r0, #37	@ 0x25
 8000aaa:	f000 f95a 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aae:	2025      	movs	r0, #37	@ 0x25
 8000ab0:	f000 f973 	bl	8000d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ab4:	e03c      	b.n	8000b30 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <HAL_UART_MspInit+0x124>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d137      	bne.n	8000b30 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aca:	61d3      	str	r3, [r2, #28]
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_UART_MspInit+0x11c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af0:	2304      	movs	r3, #4
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4619      	mov	r1, r3
 8000b02:	480f      	ldr	r0, [pc, #60]	@ (8000b40 <HAL_UART_MspInit+0x120>)
 8000b04:	f000 fa0a 	bl	8000f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <HAL_UART_MspInit+0x120>)
 8000b1c:	f000 f9fe 	bl	8000f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2105      	movs	r1, #5
 8000b24:	2026      	movs	r0, #38	@ 0x26
 8000b26:	f000 f91c 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2a:	2026      	movs	r0, #38	@ 0x26
 8000b2c:	f000 f935 	bl	8000d9a <HAL_NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	@ 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40004400 	.word	0x40004400

08000b48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff fe1e 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b4e:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b50:	4a0c      	ldr	r2, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b64:	4c09      	ldr	r4, [pc, #36]	@ (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f003 fe81 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b76:	f7ff fc13 	bl	80003a0 <main>
  bx lr
 8000b7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b84:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8000b88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b8c:	200012e0 	.word	0x200012e0

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_Init+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <HAL_Init+0x28>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f8d1 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f7ff fd36 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fcfc 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a03      	ldr	r2, [pc, #12]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000450 	.word	0x20000450

08000be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000450 	.word	0x20000450

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4906      	ldr	r1, [pc, #24]	@ (8000c90 <__NVIC_EnableIRQ+0x34>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff4f 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff64 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ffb2 	bl	8000ce8 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff81 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff57 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b085      	sub	sp, #20
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d008      	beq.n	8000de0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e020      	b.n	8000e22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 020e 	bic.w	r2, r2, #14
 8000dee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d005      	beq.n	8000e50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e051      	b.n	8000ef4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 020e 	bic.w	r2, r2, #14
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_DMA_Abort_IT+0xd4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d029      	beq.n	8000ece <HAL_DMA_Abort_IT+0xa2>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a21      	ldr	r2, [pc, #132]	@ (8000f04 <HAL_DMA_Abort_IT+0xd8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d022      	beq.n	8000eca <HAL_DMA_Abort_IT+0x9e>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <HAL_DMA_Abort_IT+0xdc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01a      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0x98>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1e      	ldr	r2, [pc, #120]	@ (8000f0c <HAL_DMA_Abort_IT+0xe0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d012      	beq.n	8000ebe <HAL_DMA_Abort_IT+0x92>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <HAL_DMA_Abort_IT+0xe4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00a      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0x8c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <HAL_DMA_Abort_IT+0xe8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d102      	bne.n	8000eb2 <HAL_DMA_Abort_IT+0x86>
 8000eac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eb0:	e00e      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xa4>
 8000eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eb6:	e00b      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xa4>
 8000eb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ebc:	e008      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xa4>
 8000ebe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec2:	e005      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xa4>
 8000ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec8:	e002      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xa4>
 8000eca:	2310      	movs	r3, #16
 8000ecc:	e000      	b.n	8000ed0 <HAL_DMA_Abort_IT+0xa4>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4a11      	ldr	r2, [pc, #68]	@ (8000f18 <HAL_DMA_Abort_IT+0xec>)
 8000ed2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	4798      	blx	r3
    } 
  }
  return status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40020008 	.word	0x40020008
 8000f04:	4002001c 	.word	0x4002001c
 8000f08:	40020030 	.word	0x40020030
 8000f0c:	40020044 	.word	0x40020044
 8000f10:	40020058 	.word	0x40020058
 8000f14:	4002006c 	.word	0x4002006c
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	@ 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e161      	b.n	80011f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f30:	2201      	movs	r2, #1
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8150 	bne.w	80011ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4a97      	ldr	r2, [pc, #604]	@ (80011b0 <HAL_GPIO_Init+0x294>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d05e      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f58:	4a95      	ldr	r2, [pc, #596]	@ (80011b0 <HAL_GPIO_Init+0x294>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d875      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f5e:	4a95      	ldr	r2, [pc, #596]	@ (80011b4 <HAL_GPIO_Init+0x298>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d058      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f64:	4a93      	ldr	r2, [pc, #588]	@ (80011b4 <HAL_GPIO_Init+0x298>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d86f      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f6a:	4a93      	ldr	r2, [pc, #588]	@ (80011b8 <HAL_GPIO_Init+0x29c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d052      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f70:	4a91      	ldr	r2, [pc, #580]	@ (80011b8 <HAL_GPIO_Init+0x29c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d869      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f76:	4a91      	ldr	r2, [pc, #580]	@ (80011bc <HAL_GPIO_Init+0x2a0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d04c      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f7c:	4a8f      	ldr	r2, [pc, #572]	@ (80011bc <HAL_GPIO_Init+0x2a0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d863      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f82:	4a8f      	ldr	r2, [pc, #572]	@ (80011c0 <HAL_GPIO_Init+0x2a4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d046      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
 8000f88:	4a8d      	ldr	r2, [pc, #564]	@ (80011c0 <HAL_GPIO_Init+0x2a4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d85d      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d82a      	bhi.n	8000fe8 <HAL_GPIO_Init+0xcc>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d859      	bhi.n	800104a <HAL_GPIO_Init+0x12e>
 8000f96:	a201      	add	r2, pc, #4	@ (adr r2, 8000f9c <HAL_GPIO_Init+0x80>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08001017 	.word	0x08001017
 8000fa0:	08000ff1 	.word	0x08000ff1
 8000fa4:	08001003 	.word	0x08001003
 8000fa8:	08001045 	.word	0x08001045
 8000fac:	0800104b 	.word	0x0800104b
 8000fb0:	0800104b 	.word	0x0800104b
 8000fb4:	0800104b 	.word	0x0800104b
 8000fb8:	0800104b 	.word	0x0800104b
 8000fbc:	0800104b 	.word	0x0800104b
 8000fc0:	0800104b 	.word	0x0800104b
 8000fc4:	0800104b 	.word	0x0800104b
 8000fc8:	0800104b 	.word	0x0800104b
 8000fcc:	0800104b 	.word	0x0800104b
 8000fd0:	0800104b 	.word	0x0800104b
 8000fd4:	0800104b 	.word	0x0800104b
 8000fd8:	0800104b 	.word	0x0800104b
 8000fdc:	0800104b 	.word	0x0800104b
 8000fe0:	08000ff9 	.word	0x08000ff9
 8000fe4:	0800100d 	.word	0x0800100d
 8000fe8:	4a76      	ldr	r2, [pc, #472]	@ (80011c4 <HAL_GPIO_Init+0x2a8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fee:	e02c      	b.n	800104a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e029      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	e024      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	3308      	adds	r3, #8
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e01f      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	330c      	adds	r3, #12
 8001012:	623b      	str	r3, [r7, #32]
          break;
 8001014:	e01a      	b.n	800104c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800101e:	2304      	movs	r3, #4
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e013      	b.n	800104c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d105      	bne.n	8001038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800102c:	2308      	movs	r3, #8
 800102e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	611a      	str	r2, [r3, #16]
          break;
 8001036:	e009      	b.n	800104c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001038:	2308      	movs	r3, #8
 800103a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	615a      	str	r2, [r3, #20]
          break;
 8001042:	e003      	b.n	800104c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x130>
          break;
 800104a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2bff      	cmp	r3, #255	@ 0xff
 8001050:	d801      	bhi.n	8001056 <HAL_GPIO_Init+0x13a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	e001      	b.n	800105a <HAL_GPIO_Init+0x13e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2bff      	cmp	r3, #255	@ 0xff
 8001060:	d802      	bhi.n	8001068 <HAL_GPIO_Init+0x14c>
 8001062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x152>
 8001068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106a:	3b08      	subs	r3, #8
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	210f      	movs	r1, #15
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	6a39      	ldr	r1, [r7, #32]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80a9 	beq.w	80011ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109c:	4b4a      	ldr	r3, [pc, #296]	@ (80011c8 <HAL_GPIO_Init+0x2ac>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_GPIO_Init+0x2ac>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b47      	ldr	r3, [pc, #284]	@ (80011c8 <HAL_GPIO_Init+0x2ac>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b4:	4a45      	ldr	r2, [pc, #276]	@ (80011cc <HAL_GPIO_Init+0x2b0>)
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a3d      	ldr	r2, [pc, #244]	@ (80011d0 <HAL_GPIO_Init+0x2b4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d00d      	beq.n	80010fc <HAL_GPIO_Init+0x1e0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a3c      	ldr	r2, [pc, #240]	@ (80011d4 <HAL_GPIO_Init+0x2b8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x1dc>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a3b      	ldr	r2, [pc, #236]	@ (80011d8 <HAL_GPIO_Init+0x2bc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d101      	bne.n	80010f4 <HAL_GPIO_Init+0x1d8>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_Init+0x1e2>
 80010f4:	2303      	movs	r3, #3
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x1e2>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_Init+0x1e2>
 80010fc:	2300      	movs	r3, #0
 80010fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800110e:	492f      	ldr	r1, [pc, #188]	@ (80011cc <HAL_GPIO_Init+0x2b0>)
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001128:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	492b      	ldr	r1, [pc, #172]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	43db      	mvns	r3, r3
 800113e:	4927      	ldr	r1, [pc, #156]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001140:	4013      	ands	r3, r2
 8001142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d006      	beq.n	800115e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001150:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	4921      	ldr	r1, [pc, #132]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800115e:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	43db      	mvns	r3, r3
 8001166:	491d      	ldr	r1, [pc, #116]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001168:	4013      	ands	r3, r2
 800116a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4917      	ldr	r1, [pc, #92]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	4913      	ldr	r1, [pc, #76]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 8001190:	4013      	ands	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01f      	beq.n	80011e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	490d      	ldr	r1, [pc, #52]	@ (80011dc <HAL_GPIO_Init+0x2c0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
 80011ac:	e01f      	b.n	80011ee <HAL_GPIO_Init+0x2d2>
 80011ae:	bf00      	nop
 80011b0:	10320000 	.word	0x10320000
 80011b4:	10310000 	.word	0x10310000
 80011b8:	10220000 	.word	0x10220000
 80011bc:	10210000 	.word	0x10210000
 80011c0:	10120000 	.word	0x10120000
 80011c4:	10110000 	.word	0x10110000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40010800 	.word	0x40010800
 80011d4:	40010c00 	.word	0x40010c00
 80011d8:	40011000 	.word	0x40011000
 80011dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_GPIO_Init+0x2f4>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4909      	ldr	r1, [pc, #36]	@ (8001210 <HAL_GPIO_Init+0x2f4>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	3301      	adds	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae96 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	372c      	adds	r7, #44	@ 0x2c
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001230:	e003      	b.n	800123a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	611a      	str	r2, [r3, #16]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e272      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8087 	beq.w	8001372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001264:	4b92      	ldr	r3, [pc, #584]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b04      	cmp	r3, #4
 800126e:	d00c      	beq.n	800128a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001270:	4b8f      	ldr	r3, [pc, #572]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d112      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5e>
 800127c:	4b8c      	ldr	r3, [pc, #560]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001288:	d10b      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4b89      	ldr	r3, [pc, #548]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d06c      	beq.n	8001370 <HAL_RCC_OscConfig+0x12c>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d168      	bne.n	8001370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e24c      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x76>
 80012ac:	4b80      	ldr	r3, [pc, #512]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a7f      	ldr	r2, [pc, #508]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e02e      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b7b      	ldr	r3, [pc, #492]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7a      	ldr	r2, [pc, #488]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b78      	ldr	r3, [pc, #480]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a77      	ldr	r2, [pc, #476]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e01d      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0xbc>
 80012e6:	4b72      	ldr	r3, [pc, #456]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a71      	ldr	r2, [pc, #452]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b6f      	ldr	r3, [pc, #444]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6e      	ldr	r2, [pc, #440]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e00b      	b.n	8001318 <HAL_RCC_OscConfig+0xd4>
 8001300:	4b6b      	ldr	r3, [pc, #428]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a6a      	ldr	r2, [pc, #424]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b68      	ldr	r3, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a67      	ldr	r2, [pc, #412]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d013      	beq.n	8001348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fc60 	bl	8000be4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fc5c 	bl	8000be4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e200      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b5d      	ldr	r3, [pc, #372]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0xe4>
 8001346:	e014      	b.n	8001372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc4c 	bl	8000be4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc48 	bl	8000be4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1ec      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x10c>
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d063      	beq.n	8001446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137e:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800138a:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d11c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x18c>
 8001396:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1c0      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4939      	ldr	r1, [pc, #228]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	e03a      	b.n	8001446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fc01 	bl	8000be4 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbfd 	bl	8000be4 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1a1      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4927      	ldr	r1, [pc, #156]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
 8001418:	e015      	b.n	8001446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <HAL_RCC_OscConfig+0x270>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fbe0 	bl	8000be4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001428:	f7ff fbdc 	bl	8000be4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e180      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d03a      	beq.n	80014c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d019      	beq.n	800148e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fbc0 	bl	8000be4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fbbc 	bl	8000be4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e160      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f000 fafe 	bl	8001a88 <RCC_Delay>
 800148c:	e01c      	b.n	80014c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_RCC_OscConfig+0x274>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001494:	f7ff fba6 	bl	8000be4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149a:	e00f      	b.n	80014bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fba2 	bl	8000be4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d908      	bls.n	80014bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e146      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	42420000 	.word	0x42420000
 80014b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b92      	ldr	r3, [pc, #584]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e9      	bne.n	800149c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a6 	beq.w	8001622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b8b      	ldr	r3, [pc, #556]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b88      	ldr	r3, [pc, #544]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	4a87      	ldr	r2, [pc, #540]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	61d3      	str	r3, [r2, #28]
 80014f2:	4b85      	ldr	r3, [pc, #532]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fe:	2301      	movs	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b82      	ldr	r3, [pc, #520]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150e:	4b7f      	ldr	r3, [pc, #508]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7e      	ldr	r2, [pc, #504]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb63 	bl	8000be4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001522:	f7ff fb5f 	bl	8000be4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	@ 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e103      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	4b75      	ldr	r3, [pc, #468]	@ (800170c <HAL_RCC_OscConfig+0x4c8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 8001548:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	e02d      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x334>
 800155e:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a69      	ldr	r2, [pc, #420]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	4b67      	ldr	r3, [pc, #412]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a66      	ldr	r2, [pc, #408]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	e01c      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d10c      	bne.n	800159a <HAL_RCC_OscConfig+0x356>
 8001580:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a60      	ldr	r2, [pc, #384]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6213      	str	r3, [r2, #32]
 800158c:	4b5e      	ldr	r3, [pc, #376]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a5d      	ldr	r2, [pc, #372]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0x36e>
 800159a:	4b5b      	ldr	r3, [pc, #364]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a5a      	ldr	r2, [pc, #360]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b58      	ldr	r3, [pc, #352]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a57      	ldr	r2, [pc, #348]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d015      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb13 	bl	8000be4 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb0f 	bl	8000be4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0b1      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ee      	beq.n	80015c2 <HAL_RCC_OscConfig+0x37e>
 80015e4:	e014      	b.n	8001610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fafd 	bl	8000be4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff faf9 	bl	8000be4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e09b      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	4b40      	ldr	r3, [pc, #256]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ee      	bne.n	80015ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001616:	4b3c      	ldr	r3, [pc, #240]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a3b      	ldr	r2, [pc, #236]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8087 	beq.w	800173a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800162c:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d061      	beq.n	80016fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d146      	bne.n	80016ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b33      	ldr	r3, [pc, #204]	@ (8001710 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff facd 	bl	8000be4 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fac9 	bl	8000be4 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e06d      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001660:	4b29      	ldr	r3, [pc, #164]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001674:	d108      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4921      	ldr	r1, [pc, #132]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a19      	ldr	r1, [r3, #32]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	430b      	orrs	r3, r1
 800169a:	491b      	ldr	r1, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x4cc>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fa9d 	bl	8000be4 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fa99 	bl	8000be4 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e03d      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x46a>
 80016cc:	e035      	b.n	800173a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_RCC_OscConfig+0x4cc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa86 	bl	8000be4 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fa82 	bl	8000be4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e026      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x498>
 80016fa:	e01e      	b.n	800173a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e019      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_OscConfig+0x500>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0d0      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d910      	bls.n	800178c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b67      	ldr	r3, [pc, #412]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 0207 	bic.w	r2, r3, #7
 8001772:	4965      	ldr	r1, [pc, #404]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a58      	ldr	r2, [pc, #352]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a52      	ldr	r2, [pc, #328]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d040      	beq.n	8001868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d115      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	4b41      	ldr	r3, [pc, #260]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e073      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06b      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b39      	ldr	r3, [pc, #228]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4936      	ldr	r1, [pc, #216]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001838:	f7ff f9d4 	bl	8000be4 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	e00a      	b.n	8001856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff f9d0 	bl	8000be4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e053      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 020c 	and.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d1eb      	bne.n	8001840 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d210      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4922      	ldr	r1, [pc, #136]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	@ (8001910 <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <HAL_RCC_ClockConfig+0x1cc>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_RCC_ClockConfig+0x1d0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe90 	bl	800061c <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40022000 	.word	0x40022000
 800190c:	40021000 	.word	0x40021000
 8001910:	08004a04 	.word	0x08004a04
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001936:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b04      	cmp	r3, #4
 8001944:	d002      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x30>
 8001946:	2b08      	cmp	r3, #8
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x36>
 800194a:	e027      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800194e:	613b      	str	r3, [r7, #16]
      break;
 8001950:	e027      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	0c9b      	lsrs	r3, r3, #18
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	0c5b      	lsrs	r3, r3, #17
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	fb03 f202 	mul.w	r2, r3, r2
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	fbb2 f3f3 	udiv	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e004      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0c      	ldr	r2, [pc, #48]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	613b      	str	r3, [r7, #16]
      break;
 800199a:	e002      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800199e:	613b      	str	r3, [r7, #16]
      break;
 80019a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a2:	693b      	ldr	r3, [r7, #16]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	007a1200 	.word	0x007a1200
 80019b8:	08004a1c 	.word	0x08004a1c
 80019bc:	08004a2c 	.word	0x08004a2c
 80019c0:	003d0900 	.word	0x003d0900

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c8:	4b02      	ldr	r3, [pc, #8]	@ (80019d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff2 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	@ (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	08004a14 	.word	0x08004a14

08001a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	0adb      	lsrs	r3, r3, #11
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	@ (8001a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08004a14 	.word	0x08004a14

08001a28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	220f      	movs	r2, #15
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_RCC_GetClockConfig+0x58>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a44:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_RCC_GetClockConfig+0x58>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_GetClockConfig+0x58>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_RCC_GetClockConfig+0x58>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a6a:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0207 	and.w	r2, r3, #7
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40022000 	.word	0x40022000

08001a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <RCC_Delay+0x34>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <RCC_Delay+0x38>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a5b      	lsrs	r3, r3, #9
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa4:	bf00      	nop
  }
  while (Delay --);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	60fa      	str	r2, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f9      	bne.n	8001aa4 <RCC_Delay+0x1c>
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	10624dd3 	.word	0x10624dd3

08001ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e041      	b.n	8001b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe fef2 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 fb88 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d001      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e035      	b.n	8001be8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a16      	ldr	r2, [pc, #88]	@ (8001bf4 <HAL_TIM_Base_Start_IT+0x90>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_TIM_Base_Start_IT+0x4e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba6:	d004      	beq.n	8001bb2 <HAL_TIM_Base_Start_IT+0x4e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <HAL_TIM_Base_Start_IT+0x94>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d111      	bne.n	8001bd6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d010      	beq.n	8001be6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd4:	e007      	b.n	8001be6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40012c00 	.word	0x40012c00
 8001bf8:	40000400 	.word	0x40000400

08001bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e041      	b.n	8001c92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f839 	bl	8001c9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 faec 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0202 	mvn.w	r2, #2
 8001cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa76 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fa69 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fa78 	bl	80021f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0204 	mvn.w	r2, #4
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fa4c 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa3f 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fa4e 	bl	80021f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d122      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d11b      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0208 	mvn.w	r2, #8
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2204      	movs	r2, #4
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa22 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fa15 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fa24 	bl	80021f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d122      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d11b      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0210 	mvn.w	r2, #16
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f9f8 	bl	80021e0 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f9eb 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f9fa 	bl	80021f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fb24 	bl	8000478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3a:	2b80      	cmp	r3, #128	@ 0x80
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e48:	2b80      	cmp	r3, #128	@ 0x80
 8001e4a:	d107      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fd06 	bl	8002868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	2b40      	cmp	r3, #64	@ 0x40
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b40      	cmp	r3, #64	@ 0x40
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f9be 	bl	8002204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0220 	mvn.w	r2, #32
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fcd1 	bl	8002856 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0ae      	b.n	8002038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	f200 809f 	bhi.w	8002028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001eea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f25 	.word	0x08001f25
 8001ef4:	08002029 	.word	0x08002029
 8001ef8:	08002029 	.word	0x08002029
 8001efc:	08002029 	.word	0x08002029
 8001f00:	08001f65 	.word	0x08001f65
 8001f04:	08002029 	.word	0x08002029
 8001f08:	08002029 	.word	0x08002029
 8001f0c:	08002029 	.word	0x08002029
 8001f10:	08001fa7 	.word	0x08001fa7
 8001f14:	08002029 	.word	0x08002029
 8001f18:	08002029 	.word	0x08002029
 8001f1c:	08002029 	.word	0x08002029
 8001f20:	08001fe7 	.word	0x08001fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f9cc 	bl	80022c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6999      	ldr	r1, [r3, #24]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	619a      	str	r2, [r3, #24]
      break;
 8001f62:	e064      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fa12 	bl	8002394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6999      	ldr	r1, [r3, #24]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	021a      	lsls	r2, r3, #8
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	619a      	str	r2, [r3, #24]
      break;
 8001fa4:	e043      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa5b 	bl	8002468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0208 	orr.w	r2, r2, #8
 8001fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0204 	bic.w	r2, r2, #4
 8001fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69d9      	ldr	r1, [r3, #28]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
      break;
 8001fe4:	e023      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 faa5 	bl	800253c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69d9      	ldr	r1, [r3, #28]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	021a      	lsls	r2, r3, #8
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	61da      	str	r2, [r3, #28]
      break;
 8002026:	e002      	b.n	800202e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	75fb      	strb	r3, [r7, #23]
      break;
 800202c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_TIM_ConfigClockSource+0x1c>
 8002058:	2302      	movs	r3, #2
 800205a:	e0b4      	b.n	80021c6 <HAL_TIM_ConfigClockSource+0x186>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800207a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002094:	d03e      	beq.n	8002114 <HAL_TIM_ConfigClockSource+0xd4>
 8002096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800209a:	f200 8087 	bhi.w	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 800209e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a2:	f000 8086 	beq.w	80021b2 <HAL_TIM_ConfigClockSource+0x172>
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020aa:	d87f      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020ac:	2b70      	cmp	r3, #112	@ 0x70
 80020ae:	d01a      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0xa6>
 80020b0:	2b70      	cmp	r3, #112	@ 0x70
 80020b2:	d87b      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020b4:	2b60      	cmp	r3, #96	@ 0x60
 80020b6:	d050      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x11a>
 80020b8:	2b60      	cmp	r3, #96	@ 0x60
 80020ba:	d877      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b50      	cmp	r3, #80	@ 0x50
 80020be:	d03c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0xfa>
 80020c0:	2b50      	cmp	r3, #80	@ 0x50
 80020c2:	d873      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	d058      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x13a>
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d86f      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020cc:	2b30      	cmp	r3, #48	@ 0x30
 80020ce:	d064      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020d0:	2b30      	cmp	r3, #48	@ 0x30
 80020d2:	d86b      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d060      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d867      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d05c      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d05a      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020e4:	e062      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020f6:	f000 fae6 	bl	80026c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	609a      	str	r2, [r3, #8]
      break;
 8002112:	e04f      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002124:	f000 facf 	bl	80026c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002136:	609a      	str	r2, [r3, #8]
      break;
 8002138:	e03c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	461a      	mov	r2, r3
 8002148:	f000 fa46 	bl	80025d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2150      	movs	r1, #80	@ 0x50
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fa9d 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8002158:	e02c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002166:	461a      	mov	r2, r3
 8002168:	f000 fa64 	bl	8002634 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2160      	movs	r1, #96	@ 0x60
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fa8d 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8002178:	e01c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	461a      	mov	r2, r3
 8002188:	f000 fa26 	bl	80025d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2140      	movs	r1, #64	@ 0x40
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fa7d 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 8002198:	e00c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f000 fa74 	bl	8002692 <TIM_ITRx_SetConfig>
      break;
 80021aa:	e003      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e000      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
	...

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <TIM_Base_SetConfig+0xa8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x28>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x28>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a22      	ldr	r2, [pc, #136]	@ (80022c4 <TIM_Base_SetConfig+0xac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1a      	ldr	r2, [pc, #104]	@ (80022c0 <TIM_Base_SetConfig+0xa8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <TIM_Base_SetConfig+0x52>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d003      	beq.n	800226a <TIM_Base_SetConfig+0x52>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a17      	ldr	r2, [pc, #92]	@ (80022c4 <TIM_Base_SetConfig+0xac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a07      	ldr	r2, [pc, #28]	@ (80022c0 <TIM_Base_SetConfig+0xa8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d103      	bne.n	80022b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	615a      	str	r2, [r3, #20]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40000400 	.word	0x40000400

080022c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 0201 	bic.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f023 0302 	bic.w	r3, r3, #2
 8002310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <TIM_OC1_SetConfig+0xc8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d10c      	bne.n	800233e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0308 	bic.w	r3, r3, #8
 800232a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f023 0304 	bic.w	r3, r3, #4
 800233c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <TIM_OC1_SetConfig+0xc8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d111      	bne.n	800236a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800234c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	621a      	str	r2, [r3, #32]
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40012c00 	.word	0x40012c00

08002394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f023 0210 	bic.w	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0320 	bic.w	r3, r3, #32
 80023de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <TIM_OC2_SetConfig+0xd0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d10d      	bne.n	8002410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800240e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a14      	ldr	r2, [pc, #80]	@ (8002464 <TIM_OC2_SetConfig+0xd0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d113      	bne.n	8002440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800241e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	621a      	str	r2, [r3, #32]
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40012c00 	.word	0x40012c00

08002468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <TIM_OC3_SetConfig+0xd0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10d      	bne.n	80024e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a14      	ldr	r2, [pc, #80]	@ (8002538 <TIM_OC3_SetConfig+0xd0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d113      	bne.n	8002512 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	621a      	str	r2, [r3, #32]
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00

0800253c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800256a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	031b      	lsls	r3, r3, #12
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0f      	ldr	r2, [pc, #60]	@ (80025d4 <TIM_OC4_SetConfig+0x98>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d109      	bne.n	80025b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	621a      	str	r2, [r3, #32]
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	40012c00 	.word	0x40012c00

080025d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0201 	bic.w	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 030a 	bic.w	r3, r3, #10
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f023 0210 	bic.w	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800265e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	031b      	lsls	r3, r3, #12
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002670:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f043 0307 	orr.w	r3, r3, #7
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	609a      	str	r2, [r3, #8]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002718:	2302      	movs	r3, #2
 800271a:	e041      	b.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002768:	d004      	beq.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a10      	ldr	r2, [pc, #64]	@ (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10c      	bne.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800277a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400

080027b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e03d      	b.n	800284c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e042      	b.n	8002912 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fe f8bd 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2224      	movs	r2, #36	@ 0x24
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fcd4 	bl	800326c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	4613      	mov	r3, r2
 8002926:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b20      	cmp	r3, #32
 8002932:	d112      	bne.n	800295a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_UART_Receive_IT+0x26>
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e00b      	b.n	800295c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	461a      	mov	r2, r3
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fab6 	bl	8002ec2 <UART_Start_Receive_IT>
 8002956:	4603      	mov	r3, r0
 8002958:	e000      	b.n	800295c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800295a:	2302      	movs	r3, #2
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ba      	sub	sp, #232	@ 0xe8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_UART_IRQHandler+0x66>
 80029b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fb93 	bl	80030ee <UART_Receive_IT>
      return;
 80029c8:	e25b      	b.n	8002e82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80de 	beq.w	8002b90 <HAL_UART_IRQHandler+0x22c>
 80029d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80d1 	beq.w	8002b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HAL_UART_IRQHandler+0xae>
 80029fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd2>
 8002a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_UART_IRQHandler+0xf6>
 8002a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d011      	beq.n	8002a8a <HAL_UART_IRQHandler+0x126>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	f043 0208 	orr.w	r2, r3, #8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 81f2 	beq.w	8002e78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x14e>
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb1e 	bl	80030ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_UART_IRQHandler+0x17a>
 8002ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04f      	beq.n	8002b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa28 	bl	8002f34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d041      	beq.n	8002b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3314      	adds	r3, #20
 8002af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1d9      	bne.n	8002af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d013      	beq.n	8002b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d44 <HAL_UART_IRQHandler+0x3e0>)
 8002b4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f96a 	bl	8000e2c <HAL_DMA_Abort_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e00e      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f993 	bl	8002e9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e00a      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f98f 	bl	8002e9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e006      	b.n	8002b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f98b 	bl	8002e9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b8a:	e175      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	bf00      	nop
    return;
 8002b8e:	e173      	b.n	8002e78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 814f 	bne.w	8002e38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8148 	beq.w	8002e38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8141 	beq.w	8002e38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80b6 	beq.w	8002d48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8145 	beq.w	8002e7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	f080 813e 	bcs.w	8002e7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f000 8088 	beq.w	8002d24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c50:	e841 2300 	strex	r3, r2, [r1]
 8002c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1d9      	bne.n	8002c14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c90:	e841 2300 	strex	r3, r2, [r1]
 8002c94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e1      	bne.n	8002c60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e3      	bne.n	8002c9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf4:	f023 0310 	bic.w	r3, r3, #16
 8002cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e3      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe f849 	bl	8000db6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f8b6 	bl	8002eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d40:	e09c      	b.n	8002e7c <HAL_UART_IRQHandler+0x518>
 8002d42:	bf00      	nop
 8002d44:	08002ff9 	.word	0x08002ff9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 808e 	beq.w	8002e80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8089 	beq.w	8002e80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e3      	bne.n	8002d6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	623b      	str	r3, [r7, #32]
   return(result);
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dca:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e3      	bne.n	8002da6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e10:	61fa      	str	r2, [r7, #28]
 8002e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e3      	bne.n	8002dec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f83b 	bl	8002eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e36:	e023      	b.n	8002e80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <HAL_UART_IRQHandler+0x4f4>
 8002e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8e5 	bl	8003020 <UART_Transmit_IT>
    return;
 8002e56:	e014      	b.n	8002e82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00e      	beq.n	8002e82 <HAL_UART_IRQHandler+0x51e>
 8002e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f924 	bl	80030be <UART_EndTransmit_IT>
    return;
 8002e76:	e004      	b.n	8002e82 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e78:	bf00      	nop
 8002e7a:	e002      	b.n	8002e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e7c:	bf00      	nop
 8002e7e:	e000      	b.n	8002e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e80:	bf00      	nop
  }
}
 8002e82:	37e8      	adds	r7, #232	@ 0xe8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2222      	movs	r2, #34	@ 0x22
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b095      	sub	sp, #84	@ 0x54
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e5      	bne.n	8002f70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d119      	bne.n	8002fe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f023 0310 	bic.w	r3, r3, #16
 8002fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fcc:	61ba      	str	r2, [r7, #24]
 8002fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e5      	bne.n	8002fac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fee:	bf00      	nop
 8002ff0:	3754      	adds	r7, #84	@ 0x54
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ff41 	bl	8002e9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b21      	cmp	r3, #33	@ 0x21
 8003032:	d13e      	bne.n	80030b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303c:	d114      	bne.n	8003068 <UART_Transmit_IT+0x48>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d110      	bne.n	8003068 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]
 8003066:	e008      	b.n	800307a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	1c59      	adds	r1, r3, #1
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6211      	str	r1, [r2, #32]
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29b      	uxth	r3, r3
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4619      	mov	r1, r3
 8003088:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800309c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fed2 	bl	8002e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b08c      	sub	sp, #48	@ 0x30
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b22      	cmp	r3, #34	@ 0x22
 8003100:	f040 80ae 	bne.w	8003260 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310c:	d117      	bne.n	800313e <UART_Receive_IT+0x50>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312c:	b29a      	uxth	r2, r3
 800312e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
 800313c:	e026      	b.n	800318c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003150:	d007      	beq.n	8003162 <UART_Receive_IT+0x74>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <UART_Receive_IT+0x82>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e008      	b.n	8003182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800317c:	b2da      	uxtb	r2, r3
 800317e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4619      	mov	r1, r3
 800319a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800319c:	2b00      	cmp	r3, #0
 800319e:	d15d      	bne.n	800325c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0220 	bic.w	r2, r2, #32
 80031ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d135      	bne.n	8003252 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	613b      	str	r3, [r7, #16]
   return(result);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 0310 	bic.w	r3, r3, #16
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	623a      	str	r2, [r7, #32]
 800320e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69f9      	ldr	r1, [r7, #28]
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	61bb      	str	r3, [r7, #24]
   return(result);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b10      	cmp	r3, #16
 800322c:	d10a      	bne.n	8003244 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fe2e 	bl	8002eac <HAL_UARTEx_RxEventCallback>
 8003250:	e002      	b.n	8003258 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd f844 	bl	80002e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e002      	b.n	8003262 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3730      	adds	r7, #48	@ 0x30
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032a6:	f023 030c 	bic.w	r3, r3, #12
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003380 <UART_SetConfig+0x114>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032d4:	f7fe fb94 	bl	8001a00 <HAL_RCC_GetPCLK2Freq>
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	e002      	b.n	80032e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fb7c 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 80032e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	4a22      	ldr	r2, [pc, #136]	@ (8003384 <UART_SetConfig+0x118>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	0119      	lsls	r1, r3, #4
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009a      	lsls	r2, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fbb2 f2f3 	udiv	r2, r2, r3
 8003318:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <UART_SetConfig+0x118>)
 800331a:	fba3 0302 	umull	r0, r3, r3, r2
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2064      	movs	r0, #100	@ 0x64
 8003322:	fb00 f303 	mul.w	r3, r0, r3
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	3332      	adds	r3, #50	@ 0x32
 800332c:	4a15      	ldr	r2, [pc, #84]	@ (8003384 <UART_SetConfig+0x118>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003338:	4419      	add	r1, r3
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009a      	lsls	r2, r3, #2
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <UART_SetConfig+0x118>)
 8003352:	fba3 0302 	umull	r0, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2064      	movs	r0, #100	@ 0x64
 800335a:	fb00 f303 	mul.w	r3, r0, r3
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	3332      	adds	r3, #50	@ 0x32
 8003364:	4a07      	ldr	r2, [pc, #28]	@ (8003384 <UART_SetConfig+0x118>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	440a      	add	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40013800 	.word	0x40013800
 8003384:	51eb851f 	.word	0x51eb851f

08003388 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800339a:	2b84      	cmp	r3, #132	@ 0x84
 800339c:	d005      	beq.n	80033aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800339e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3303      	adds	r3, #3
 80033a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80033ba:	f000 faef 	bl	800399c <vTaskStartScheduler>
  
  return osOK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c6:	b089      	sub	sp, #36	@ 0x24
 80033c8:	af04      	add	r7, sp, #16
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d020      	beq.n	8003418 <osThreadCreate+0x54>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01c      	beq.n	8003418 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685c      	ldr	r4, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691e      	ldr	r6, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ffc9 	bl	8003388 <makeFreeRtosPriority>
 80033f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003400:	9202      	str	r2, [sp, #8]
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	9100      	str	r1, [sp, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	4632      	mov	r2, r6
 800340a:	4629      	mov	r1, r5
 800340c:	4620      	mov	r0, r4
 800340e:	f000 f8e8 	bl	80035e2 <xTaskCreateStatic>
 8003412:	4603      	mov	r3, r0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e01c      	b.n	8003452 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685c      	ldr	r4, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003424:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ffab 	bl	8003388 <makeFreeRtosPriority>
 8003432:	4602      	mov	r2, r0
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4632      	mov	r2, r6
 8003440:	4629      	mov	r1, r5
 8003442:	4620      	mov	r0, r4
 8003444:	f000 f92c 	bl	80036a0 <xTaskCreate>
 8003448:	4603      	mov	r3, r0
 800344a:	2b01      	cmp	r3, #1
 800344c:	d001      	beq.n	8003452 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800345c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <osDelay+0x16>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	e000      	b.n	8003474 <osDelay+0x18>
 8003472:	2301      	movs	r3, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fa5b 	bl	8003930 <vTaskDelay>
  
  return osOK;
 800347a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f103 0208 	add.w	r2, r3, #8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f103 0208 	add.w	r2, r3, #8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f103 0208 	add.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d103      	bne.n	8003540 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e00c      	b.n	800355a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3308      	adds	r3, #8
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e002      	b.n	800354e <vListInsert+0x2e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d2f6      	bcs.n	8003548 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6892      	ldr	r2, [r2, #8]
 80035a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6852      	ldr	r2, [r2, #4]
 80035b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d103      	bne.n	80035c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b08e      	sub	sp, #56	@ 0x38
 80035e6:	af04      	add	r7, sp, #16
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	e7fd      	b.n	800360a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <xTaskCreateStatic+0x4a>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	61fb      	str	r3, [r7, #28]
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800362c:	23a0      	movs	r3, #160	@ 0xa0
 800362e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2ba0      	cmp	r3, #160	@ 0xa0
 8003634:	d00b      	beq.n	800364e <xTaskCreateStatic+0x6c>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61bb      	str	r3, [r7, #24]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01e      	beq.n	8003692 <xTaskCreateStatic+0xb0>
 8003654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01b      	beq.n	8003692 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	2202      	movs	r2, #2
 8003668:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800366c:	2300      	movs	r3, #0
 800366e:	9303      	str	r3, [sp, #12]
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	f107 0314 	add.w	r3, r7, #20
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f851 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800368a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800368c:	f000 f8e6 	bl	800385c <prvAddNewTaskToReadyList>
 8003690:	e001      	b.n	8003696 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003696:	697b      	ldr	r3, [r7, #20]
	}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	@ 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	@ 0x30
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fea3 	bl	8004400 <pvPortMalloc>
 80036ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80036c2:	20a0      	movs	r0, #160	@ 0xa0
 80036c4:	f000 fe9c 	bl	8004400 <pvPortMalloc>
 80036c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80036d6:	e005      	b.n	80036e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036d8:	6978      	ldr	r0, [r7, #20]
 80036da:	f000 ff59 	bl	8004590 <vPortFree>
 80036de:	e001      	b.n	80036e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d017      	beq.n	800371a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	2300      	movs	r3, #0
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	9302      	str	r3, [sp, #8]
 80036fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f80f 	bl	800372c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800370e:	69f8      	ldr	r0, [r7, #28]
 8003710:	f000 f8a4 	bl	800385c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003714:	2301      	movs	r3, #1
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e002      	b.n	8003720 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003720:	69bb      	ldr	r3, [r7, #24]
	}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003744:	3b01      	subs	r3, #1
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	617b      	str	r3, [r7, #20]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e012      	b.n	80037a2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	7819      	ldrb	r1, [r3, #0]
 8003784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	3334      	adds	r3, #52	@ 0x34
 800378c:	460a      	mov	r2, r1
 800378e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d9e9      	bls.n	800377c <prvInitialiseNewTask+0x50>
 80037a8:	e000      	b.n	80037ac <prvInitialiseNewTask+0x80>
		{
			break;
 80037aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d901      	bls.n	80037be <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037ba:	2306      	movs	r3, #6
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	3304      	adds	r3, #4
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fe74 	bl	80034c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	3318      	adds	r3, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fe6f 	bl	80034c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ec:	f1c3 0207 	rsb	r2, r3, #7
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	2200      	movs	r2, #0
 8003806:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	334c      	adds	r3, #76	@ 0x4c
 800380e:	224c      	movs	r2, #76	@ 0x4c
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ffd2 	bl	80047bc <memset>
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	4a0d      	ldr	r2, [pc, #52]	@ (8003850 <prvInitialiseNewTask+0x124>)
 800381c:	651a      	str	r2, [r3, #80]	@ 0x50
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	4a0c      	ldr	r2, [pc, #48]	@ (8003854 <prvInitialiseNewTask+0x128>)
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
 8003824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003826:	4a0c      	ldr	r2, [pc, #48]	@ (8003858 <prvInitialiseNewTask+0x12c>)
 8003828:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	68f9      	ldr	r1, [r7, #12]
 800382e:	69b8      	ldr	r0, [r7, #24]
 8003830:	f000 fc30 	bl	8004094 <pxPortInitialiseStack>
 8003834:	4602      	mov	r2, r0
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003846:	bf00      	nop
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200011a0 	.word	0x200011a0
 8003854:	20001208 	.word	0x20001208
 8003858:	20001270 	.word	0x20001270

0800385c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003864:	f000 fd0a 	bl	800427c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003868:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <prvAddNewTaskToReadyList+0xb8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <prvAddNewTaskToReadyList+0xb8>)
 8003870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800387a:	4a27      	ldr	r2, [pc, #156]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003880:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <prvAddNewTaskToReadyList+0xb8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d110      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003888:	f000 fad6 	bl	8003e38 <prvInitialiseTaskLists>
 800388c:	e00d      	b.n	80038aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800388e:	4b23      	ldr	r3, [pc, #140]	@ (800391c <prvAddNewTaskToReadyList+0xc0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003896:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d802      	bhi.n	80038aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003920 <prvAddNewTaskToReadyList+0xc4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <prvAddNewTaskToReadyList+0xc4>)
 80038b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <prvAddNewTaskToReadyList+0xc8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <prvAddNewTaskToReadyList+0xc8>)
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4a15      	ldr	r2, [pc, #84]	@ (8003928 <prvAddNewTaskToReadyList+0xcc>)
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	4619      	mov	r1, r3
 80038dc:	4610      	mov	r0, r2
 80038de:	f7ff fdfc 	bl	80034da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038e2:	f000 fcfb 	bl	80042dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <prvAddNewTaskToReadyList+0xc0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00e      	beq.n	800390c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <prvAddNewTaskToReadyList+0xbc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d207      	bcs.n	800390c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000554 	.word	0x20000554
 8003918:	20000454 	.word	0x20000454
 800391c:	20000560 	.word	0x20000560
 8003920:	20000570 	.word	0x20000570
 8003924:	2000055c 	.word	0x2000055c
 8003928:	20000458 	.word	0x20000458
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <vTaskDelay+0x64>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <vTaskDelay+0x32>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	60bb      	str	r3, [r7, #8]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003962:	f000 f885 	bl	8003a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003966:	2100      	movs	r1, #0
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fb2d 	bl	8003fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800396e:	f000 f88d 	bl	8003a8c <xTaskResumeAll>
 8003972:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800397a:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <vTaskDelay+0x68>)
 800397c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000057c 	.word	0x2000057c
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039aa:	463a      	mov	r2, r7
 80039ac:	1d39      	adds	r1, r7, #4
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fbcc 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	9202      	str	r2, [sp, #8]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	460a      	mov	r2, r1
 80039ca:	4921      	ldr	r1, [pc, #132]	@ (8003a50 <vTaskStartScheduler+0xb4>)
 80039cc:	4821      	ldr	r0, [pc, #132]	@ (8003a54 <vTaskStartScheduler+0xb8>)
 80039ce:	f7ff fe08 	bl	80035e2 <xTaskCreateStatic>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4a20      	ldr	r2, [pc, #128]	@ (8003a58 <vTaskStartScheduler+0xbc>)
 80039d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a58 <vTaskStartScheduler+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039e0:	2301      	movs	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	e001      	b.n	80039ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d11b      	bne.n	8003a28 <vTaskStartScheduler+0x8c>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	613b      	str	r3, [r7, #16]
}
 8003a02:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a04:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <vTaskStartScheduler+0xc0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	334c      	adds	r3, #76	@ 0x4c
 8003a0a:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <vTaskStartScheduler+0xc4>)
 8003a0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a0e:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <vTaskStartScheduler+0xc8>)
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a16:	4b14      	ldr	r3, [pc, #80]	@ (8003a68 <vTaskStartScheduler+0xcc>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a1c:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <vTaskStartScheduler+0xd0>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a22:	f000 fbb9 	bl	8004198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a26:	e00f      	b.n	8003a48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d10b      	bne.n	8003a48 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	60fb      	str	r3, [r7, #12]
}
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <vTaskStartScheduler+0xa8>
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	080049fc 	.word	0x080049fc
 8003a54:	08003e09 	.word	0x08003e09
 8003a58:	20000578 	.word	0x20000578
 8003a5c:	20000454 	.word	0x20000454
 8003a60:	20000010 	.word	0x20000010
 8003a64:	20000574 	.word	0x20000574
 8003a68:	20000560 	.word	0x20000560
 8003a6c:	20000558 	.word	0x20000558

08003a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <vTaskSuspendAll+0x18>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	4a03      	ldr	r2, [pc, #12]	@ (8003a88 <vTaskSuspendAll+0x18>)
 8003a7c:	6013      	str	r3, [r2, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	2000057c 	.word	0x2000057c

08003a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a9a:	4b42      	ldr	r3, [pc, #264]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <xTaskResumeAll+0x2e>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	603b      	str	r3, [r7, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aba:	f000 fbdf 	bl	800427c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003abe:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	4a37      	ldr	r2, [pc, #220]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003ac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac8:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <xTaskResumeAll+0x118>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d161      	bne.n	8003b94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ad0:	4b35      	ldr	r3, [pc, #212]	@ (8003ba8 <xTaskResumeAll+0x11c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05d      	beq.n	8003b94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ad8:	e02e      	b.n	8003b38 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ada:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <xTaskResumeAll+0x120>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fd52 	bl	8003590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fd4d 	bl	8003590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb0 <xTaskResumeAll+0x124>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <xTaskResumeAll+0x124>)
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <xTaskResumeAll+0x128>)
 8003b16:	441a      	add	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f7ff fcdb 	bl	80034da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <xTaskResumeAll+0x12c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b32:	4b22      	ldr	r3, [pc, #136]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b38:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <xTaskResumeAll+0x120>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1cc      	bne.n	8003ada <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b46:	f000 fa1b 	bl	8003f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <xTaskResumeAll+0x134>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d010      	beq.n	8003b78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b56:	f000 f837 	bl	8003bc8 <xTaskIncrementTick>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b60:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f1      	bne.n	8003b56 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003b72:	4b13      	ldr	r3, [pc, #76]	@ (8003bc0 <xTaskResumeAll+0x134>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b78:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <xTaskResumeAll+0x130>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b84:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <xTaskResumeAll+0x138>)
 8003b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b94:	f000 fba2 	bl	80042dc <vPortExitCritical>

	return xAlreadyYielded;
 8003b98:	68bb      	ldr	r3, [r7, #8]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000057c 	.word	0x2000057c
 8003ba8:	20000554 	.word	0x20000554
 8003bac:	20000514 	.word	0x20000514
 8003bb0:	2000055c 	.word	0x2000055c
 8003bb4:	20000458 	.word	0x20000458
 8003bb8:	20000454 	.word	0x20000454
 8003bbc:	20000568 	.word	0x20000568
 8003bc0:	20000564 	.word	0x20000564
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd2:	4b51      	ldr	r3, [pc, #324]	@ (8003d18 <xTaskIncrementTick+0x150>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 808e 	bne.w	8003cf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bdc:	4b4f      	ldr	r3, [pc, #316]	@ (8003d1c <xTaskIncrementTick+0x154>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be4:	4a4d      	ldr	r2, [pc, #308]	@ (8003d1c <xTaskIncrementTick+0x154>)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d121      	bne.n	8003c34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xTaskIncrementTick+0x46>
 8003c12:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	4b42      	ldr	r3, [pc, #264]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a40      	ldr	r2, [pc, #256]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4a40      	ldr	r2, [pc, #256]	@ (8003d24 <xTaskIncrementTick+0x15c>)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b40      	ldr	r3, [pc, #256]	@ (8003d28 <xTaskIncrementTick+0x160>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d28 <xTaskIncrementTick+0x160>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	f000 f9a6 	bl	8003f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c34:	4b3d      	ldr	r3, [pc, #244]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d34d      	bcc.n	8003cda <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3e:	4b38      	ldr	r3, [pc, #224]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <xTaskIncrementTick+0x84>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <xTaskIncrementTick+0x86>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c52:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	601a      	str	r2, [r3, #0]
					break;
 8003c5a:	e03e      	b.n	8003cda <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c5c:	4b30      	ldr	r3, [pc, #192]	@ (8003d20 <xTaskIncrementTick+0x158>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d203      	bcs.n	8003c7c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c74:	4a2d      	ldr	r2, [pc, #180]	@ (8003d2c <xTaskIncrementTick+0x164>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
						break;
 8003c7a:	e02e      	b.n	8003cda <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fc85 	bl	8003590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3318      	adds	r3, #24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fc7c 	bl	8003590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <xTaskIncrementTick+0x168>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <xTaskIncrementTick+0x168>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <xTaskIncrementTick+0x16c>)
 8003cb8:	441a      	add	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff fc0a 	bl	80034da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cca:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <xTaskIncrementTick+0x170>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3b4      	bcc.n	8003c3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd8:	e7b1      	b.n	8003c3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cda:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <xTaskIncrementTick+0x170>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce0:	4914      	ldr	r1, [pc, #80]	@ (8003d34 <xTaskIncrementTick+0x16c>)
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d907      	bls.n	8003d02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e004      	b.n	8003d02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <xTaskIncrementTick+0x174>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8003d3c <xTaskIncrementTick+0x174>)
 8003d00:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d02:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <xTaskIncrementTick+0x178>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d0e:	697b      	ldr	r3, [r7, #20]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000057c 	.word	0x2000057c
 8003d1c:	20000558 	.word	0x20000558
 8003d20:	2000050c 	.word	0x2000050c
 8003d24:	20000510 	.word	0x20000510
 8003d28:	2000056c 	.word	0x2000056c
 8003d2c:	20000574 	.word	0x20000574
 8003d30:	2000055c 	.word	0x2000055c
 8003d34:	20000458 	.word	0x20000458
 8003d38:	20000454 	.word	0x20000454
 8003d3c:	20000564 	.word	0x20000564
 8003d40:	20000568 	.word	0x20000568

08003d44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d4a:	4b29      	ldr	r3, [pc, #164]	@ (8003df0 <vTaskSwitchContext+0xac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d52:	4b28      	ldr	r3, [pc, #160]	@ (8003df4 <vTaskSwitchContext+0xb0>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d58:	e045      	b.n	8003de6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003d5a:	4b26      	ldr	r3, [pc, #152]	@ (8003df4 <vTaskSwitchContext+0xb0>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d60:	4b25      	ldr	r3, [pc, #148]	@ (8003df8 <vTaskSwitchContext+0xb4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	f1c3 031f 	rsb	r3, r3, #31
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	4921      	ldr	r1, [pc, #132]	@ (8003dfc <vTaskSwitchContext+0xb8>)
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <vTaskSwitchContext+0x5a>
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <vTaskSwitchContext+0xb8>)
 8003dae:	4413      	add	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d104      	bne.n	8003dd2 <vTaskSwitchContext+0x8e>
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <vTaskSwitchContext+0xbc>)
 8003dda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <vTaskSwitchContext+0xbc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	334c      	adds	r3, #76	@ 0x4c
 8003de2:	4a08      	ldr	r2, [pc, #32]	@ (8003e04 <vTaskSwitchContext+0xc0>)
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	2000057c 	.word	0x2000057c
 8003df4:	20000568 	.word	0x20000568
 8003df8:	2000055c 	.word	0x2000055c
 8003dfc:	20000458 	.word	0x20000458
 8003e00:	20000454 	.word	0x20000454
 8003e04:	20000010 	.word	0x20000010

08003e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e10:	f000 f852 	bl	8003eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <prvIdleTask+0x28>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d9f9      	bls.n	8003e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <prvIdleTask+0x2c>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e2c:	e7f0      	b.n	8003e10 <prvIdleTask+0x8>
 8003e2e:	bf00      	nop
 8003e30:	20000458 	.word	0x20000458
 8003e34:	e000ed04 	.word	0xe000ed04

08003e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	e00c      	b.n	8003e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <prvInitialiseTaskLists+0x60>)
 8003e50:	4413      	add	r3, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fb16 	bl	8003484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b06      	cmp	r3, #6
 8003e62:	d9ef      	bls.n	8003e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e64:	480d      	ldr	r0, [pc, #52]	@ (8003e9c <prvInitialiseTaskLists+0x64>)
 8003e66:	f7ff fb0d 	bl	8003484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e6a:	480d      	ldr	r0, [pc, #52]	@ (8003ea0 <prvInitialiseTaskLists+0x68>)
 8003e6c:	f7ff fb0a 	bl	8003484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e70:	480c      	ldr	r0, [pc, #48]	@ (8003ea4 <prvInitialiseTaskLists+0x6c>)
 8003e72:	f7ff fb07 	bl	8003484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e76:	480c      	ldr	r0, [pc, #48]	@ (8003ea8 <prvInitialiseTaskLists+0x70>)
 8003e78:	f7ff fb04 	bl	8003484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e7c:	480b      	ldr	r0, [pc, #44]	@ (8003eac <prvInitialiseTaskLists+0x74>)
 8003e7e:	f7ff fb01 	bl	8003484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <prvInitialiseTaskLists+0x78>)
 8003e84:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <prvInitialiseTaskLists+0x64>)
 8003e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <prvInitialiseTaskLists+0x7c>)
 8003e8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ea0 <prvInitialiseTaskLists+0x68>)
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000458 	.word	0x20000458
 8003e9c:	200004e4 	.word	0x200004e4
 8003ea0:	200004f8 	.word	0x200004f8
 8003ea4:	20000514 	.word	0x20000514
 8003ea8:	20000528 	.word	0x20000528
 8003eac:	20000540 	.word	0x20000540
 8003eb0:	2000050c 	.word	0x2000050c
 8003eb4:	20000510 	.word	0x20000510

08003eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ebe:	e019      	b.n	8003ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ec0:	f000 f9dc 	bl	800427c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <prvCheckTasksWaitingTermination+0x50>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fb5d 	bl	8003590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <prvCheckTasksWaitingTermination+0x54>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4a0b      	ldr	r2, [pc, #44]	@ (8003f0c <prvCheckTasksWaitingTermination+0x54>)
 8003ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003eea:	f000 f9f7 	bl	80042dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f810 	bl	8003f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <prvCheckTasksWaitingTermination+0x58>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e1      	bne.n	8003ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000528 	.word	0x20000528
 8003f0c:	20000554 	.word	0x20000554
 8003f10:	2000053c 	.word	0x2000053c

08003f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	334c      	adds	r3, #76	@ 0x4c
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc53 	bl	80047cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fb2b 	bl	8004590 <vPortFree>
				vPortFree( pxTCB );
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fb28 	bl	8004590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f40:	e019      	b.n	8003f76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d103      	bne.n	8003f54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fb1f 	bl	8004590 <vPortFree>
	}
 8003f52:	e010      	b.n	8003f76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d00b      	beq.n	8003f76 <prvDeleteTCB+0x62>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60fb      	str	r3, [r7, #12]
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <prvDeleteTCB+0x5e>
	}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f86:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <prvResetNextTaskUnblockTime+0x40>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <prvResetNextTaskUnblockTime+0x14>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <prvResetNextTaskUnblockTime+0x16>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <prvResetNextTaskUnblockTime+0x44>)
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fa2:	e008      	b.n	8003fb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fa4:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <prvResetNextTaskUnblockTime+0x40>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a04      	ldr	r2, [pc, #16]	@ (8003fc4 <prvResetNextTaskUnblockTime+0x44>)
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	2000050c 	.word	0x2000050c
 8003fc4:	20000574 	.word	0x20000574

08003fc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fd2:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fd8:	4b28      	ldr	r3, [pc, #160]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fad6 	bl	8003590 <uxListRemove>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	4b21      	ldr	r3, [pc, #132]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	4a20      	ldr	r2, [pc, #128]	@ (8004080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004000:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d10a      	bne.n	8004020 <prvAddCurrentTaskToDelayedList+0x58>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004010:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	481a      	ldr	r0, [pc, #104]	@ (8004084 <prvAddCurrentTaskToDelayedList+0xbc>)
 800401a:	f7ff fa5e 	bl	80034da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800401e:	e026      	b.n	800406e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004028:	4b14      	ldr	r3, [pc, #80]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	429a      	cmp	r2, r3
 8004036:	d209      	bcs.n	800404c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <prvAddCurrentTaskToDelayedList+0xc0>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0f      	ldr	r3, [pc, #60]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7ff fa6b 	bl	8003520 <vListInsert>
}
 800404a:	e010      	b.n	800406e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <prvAddCurrentTaskToDelayedList+0xc4>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7ff fa61 	bl	8003520 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800405e:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d202      	bcs.n	800406e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004068:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <prvAddCurrentTaskToDelayedList+0xc8>)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6013      	str	r3, [r2, #0]
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000558 	.word	0x20000558
 800407c:	20000454 	.word	0x20000454
 8004080:	2000055c 	.word	0x2000055c
 8004084:	20000540 	.word	0x20000540
 8004088:	20000510 	.word	0x20000510
 800408c:	2000050c 	.word	0x2000050c
 8004090:	20000574 	.word	0x20000574

08004094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b04      	subs	r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b04      	subs	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b04      	subs	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040c4:	4a08      	ldr	r2, [pc, #32]	@ (80040e8 <pxPortInitialiseStack+0x54>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b14      	subs	r3, #20
 80040ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b20      	subs	r3, #32
 80040da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	080040ed 	.word	0x080040ed

080040ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <prvTaskExitError+0x54>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d00b      	beq.n	8004118 <prvTaskExitError+0x2c>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	60fb      	str	r3, [r7, #12]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <prvTaskExitError+0x28>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60bb      	str	r3, [r7, #8]
}
 800412a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800412c:	bf00      	nop
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0fc      	beq.n	800412e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	2000000c 	.word	0x2000000c
	...

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	f04e 0e0d 	orr.w	lr, lr, #13
 800416e:	4770      	bx	lr

08004170 <pxCurrentTCBConst2>:
 8004170:	20000454 	.word	0x20000454
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004178:	4806      	ldr	r0, [pc, #24]	@ (8004194 <prvPortStartFirstTask+0x1c>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	b662      	cpsie	i
 8004184:	b661      	cpsie	f
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	df00      	svc	0
 8004190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004192:	bf00      	nop
 8004194:	e000ed08 	.word	0xe000ed08

08004198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <xPortStartScheduler+0xd0>)
 80041a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	22ff      	movs	r2, #255	@ 0xff
 80041ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b2a      	ldr	r3, [pc, #168]	@ (800426c <xPortStartScheduler+0xd4>)
 80041c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041cc:	e009      	b.n	80041e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041ce:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b80      	cmp	r3, #128	@ 0x80
 80041ec:	d0ef      	beq.n	80041ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <xPortStartScheduler+0xd8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d00b      	beq.n	8004212 <xPortStartScheduler+0x7a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004212:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <xPortStartScheduler+0xd8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004224:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <xPortStartScheduler+0xd8>)
 8004226:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0f      	ldr	r2, [pc, #60]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004236:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800423a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800423c:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <xPortStartScheduler+0xdc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <xPortStartScheduler+0xdc>)
 8004242:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004246:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004248:	f000 f8b8 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <xPortStartScheduler+0xe0>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004252:	f7ff ff91 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004256:	f7ff fd75 	bl	8003d44 <vTaskSwitchContext>
	prvTaskExitError();
 800425a:	f7ff ff47 	bl	80040ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000e400 	.word	0xe000e400
 800426c:	20000580 	.word	0x20000580
 8004270:	20000584 	.word	0x20000584
 8004274:	e000ed20 	.word	0xe000ed20
 8004278:	2000000c 	.word	0x2000000c

0800427c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	607b      	str	r3, [r7, #4]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004296:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <vPortEnterCritical+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <vPortEnterCritical+0x58>)
 800429e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <vPortEnterCritical+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d110      	bne.n	80042ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <vPortEnterCritical+0x5c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <vPortEnterCritical+0x4e>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	603b      	str	r3, [r7, #0]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <vPortEnterCritical+0x4a>
	}
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	2000000c 	.word	0x2000000c
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <vPortExitCritical+0x26>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <vPortExitCritical+0x50>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <vPortExitCritical+0x50>)
 800430a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800430c:	4b07      	ldr	r3, [pc, #28]	@ (800432c <vPortExitCritical+0x50>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <vPortExitCritical+0x44>
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800431e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	2000000c 	.word	0x2000000c

08004330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004330:	f3ef 8009 	mrs	r0, PSP
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <pxCurrentTCBConst>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004340:	6010      	str	r0, [r2, #0]
 8004342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800434a:	f380 8811 	msr	BASEPRI, r0
 800434e:	f7ff fcf9 	bl	8003d44 <vTaskSwitchContext>
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004366:	f380 8809 	msr	PSP, r0
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	4770      	bx	lr

08004370 <pxCurrentTCBConst>:
 8004370:	20000454 	.word	0x20000454
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7ff fc19 	bl	8003bc8 <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <SysTick_Handler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <vPortSetupTimerInterrupt+0x30>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	e000e010 	.word	0xe000e010
 80043f0:	e000e018 	.word	0xe000e018
 80043f4:	20000000 	.word	0x20000000
 80043f8:	10624dd3 	.word	0x10624dd3
 80043fc:	e000e014 	.word	0xe000e014

08004400 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800440c:	f7ff fb30 	bl	8003a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004410:	4b5a      	ldr	r3, [pc, #360]	@ (800457c <pvPortMalloc+0x17c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004418:	f000 f916 	bl	8004648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800441c:	4b58      	ldr	r3, [pc, #352]	@ (8004580 <pvPortMalloc+0x180>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 8090 	bne.w	800454a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01e      	beq.n	800446e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004430:	2208      	movs	r2, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d015      	beq.n	800446e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f023 0307 	bic.w	r3, r3, #7
 8004448:	3308      	adds	r3, #8
 800444a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <pvPortMalloc+0x6e>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	617b      	str	r3, [r7, #20]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d06a      	beq.n	800454a <pvPortMalloc+0x14a>
 8004474:	4b43      	ldr	r3, [pc, #268]	@ (8004584 <pvPortMalloc+0x184>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	429a      	cmp	r2, r3
 800447c:	d865      	bhi.n	800454a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800447e:	4b42      	ldr	r3, [pc, #264]	@ (8004588 <pvPortMalloc+0x188>)
 8004480:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004482:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <pvPortMalloc+0x188>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004488:	e004      	b.n	8004494 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	429a      	cmp	r2, r3
 800449c:	d903      	bls.n	80044a6 <pvPortMalloc+0xa6>
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f1      	bne.n	800448a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044a6:	4b35      	ldr	r3, [pc, #212]	@ (800457c <pvPortMalloc+0x17c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d04c      	beq.n	800454a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2208      	movs	r2, #8
 80044b6:	4413      	add	r3, r2
 80044b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	2308      	movs	r3, #8
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d920      	bls.n	8004514 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <pvPortMalloc+0xfc>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	613b      	str	r3, [r7, #16]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800450e:	69b8      	ldr	r0, [r7, #24]
 8004510:	f000 f8fc 	bl	800470c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004514:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <pvPortMalloc+0x184>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	4a19      	ldr	r2, [pc, #100]	@ (8004584 <pvPortMalloc+0x184>)
 8004520:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004522:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <pvPortMalloc+0x184>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b19      	ldr	r3, [pc, #100]	@ (800458c <pvPortMalloc+0x18c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d203      	bcs.n	8004536 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800452e:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <pvPortMalloc+0x184>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a16      	ldr	r2, [pc, #88]	@ (800458c <pvPortMalloc+0x18c>)
 8004534:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <pvPortMalloc+0x180>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	431a      	orrs	r2, r3
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800454a:	f7ff fa9f 	bl	8003a8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <pvPortMalloc+0x170>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	60fb      	str	r3, [r7, #12]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <pvPortMalloc+0x16c>
	return pvReturn;
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	@ 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20001190 	.word	0x20001190
 8004580:	2000119c 	.word	0x2000119c
 8004584:	20001194 	.word	0x20001194
 8004588:	20001188 	.word	0x20001188
 800458c:	20001198 	.word	0x20001198

08004590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04a      	beq.n	8004638 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045a2:	2308      	movs	r3, #8
 80045a4:	425b      	negs	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b22      	ldr	r3, [pc, #136]	@ (8004640 <vPortFree+0xb0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <vPortFree+0x46>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <vPortFree+0x66>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <vPortFree+0xb0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d019      	beq.n	8004638 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4b0b      	ldr	r3, [pc, #44]	@ (8004640 <vPortFree+0xb0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	43db      	mvns	r3, r3
 8004616:	401a      	ands	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800461c:	f7ff fa28 	bl	8003a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <vPortFree+0xb4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4413      	add	r3, r2
 800462a:	4a06      	ldr	r2, [pc, #24]	@ (8004644 <vPortFree+0xb4>)
 800462c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800462e:	6938      	ldr	r0, [r7, #16]
 8004630:	f000 f86c 	bl	800470c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004634:	f7ff fa2a 	bl	8003a8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004638:	bf00      	nop
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	2000119c 	.word	0x2000119c
 8004644:	20001194 	.word	0x20001194

08004648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800464e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004654:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <prvHeapInit+0xac>)
 8004656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3307      	adds	r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a1f      	ldr	r2, [pc, #124]	@ (80046f4 <prvHeapInit+0xac>)
 8004678:	4413      	add	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004680:	4a1d      	ldr	r2, [pc, #116]	@ (80046f8 <prvHeapInit+0xb0>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004686:	4b1c      	ldr	r3, [pc, #112]	@ (80046f8 <prvHeapInit+0xb0>)
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004694:	2208      	movs	r2, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <prvHeapInit+0xb4>)
 80046a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046aa:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <prvHeapInit+0xb4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <prvHeapInit+0xb4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046c8:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <prvHeapInit+0xb4>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <prvHeapInit+0xb8>)
 80046d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <prvHeapInit+0xbc>)
 80046de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <prvHeapInit+0xc0>)
 80046e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000588 	.word	0x20000588
 80046f8:	20001188 	.word	0x20001188
 80046fc:	20001190 	.word	0x20001190
 8004700:	20001198 	.word	0x20001198
 8004704:	20001194 	.word	0x20001194
 8004708:	2000119c 	.word	0x2000119c

0800470c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004714:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e002      	b.n	8004720 <prvInsertBlockIntoFreeList+0x14>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d8f7      	bhi.n	800471a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4413      	add	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d108      	bne.n	800474e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	441a      	add	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d118      	bne.n	8004794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b14      	ldr	r3, [pc, #80]	@ (80047b8 <prvInsertBlockIntoFreeList+0xac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d00d      	beq.n	800478a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	441a      	add	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e008      	b.n	800479c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <prvInsertBlockIntoFreeList+0xac>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e003      	b.n	800479c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d002      	beq.n	80047aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	20001188 	.word	0x20001188
 80047b8:	20001190 	.word	0x20001190

080047bc <memset>:
 80047bc:	4603      	mov	r3, r0
 80047be:	4402      	add	r2, r0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <memset+0xa>
 80047c4:	4770      	bx	lr
 80047c6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ca:	e7f9      	b.n	80047c0 <memset+0x4>

080047cc <_reclaim_reent>:
 80047cc:	4b29      	ldr	r3, [pc, #164]	@ (8004874 <_reclaim_reent+0xa8>)
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4604      	mov	r4, r0
 80047d4:	4283      	cmp	r3, r0
 80047d6:	d04b      	beq.n	8004870 <_reclaim_reent+0xa4>
 80047d8:	69c3      	ldr	r3, [r0, #28]
 80047da:	b1ab      	cbz	r3, 8004808 <_reclaim_reent+0x3c>
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	b16b      	cbz	r3, 80047fc <_reclaim_reent+0x30>
 80047e0:	2500      	movs	r5, #0
 80047e2:	69e3      	ldr	r3, [r4, #28]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	5959      	ldr	r1, [r3, r5]
 80047e8:	2900      	cmp	r1, #0
 80047ea:	d13b      	bne.n	8004864 <_reclaim_reent+0x98>
 80047ec:	3504      	adds	r5, #4
 80047ee:	2d80      	cmp	r5, #128	@ 0x80
 80047f0:	d1f7      	bne.n	80047e2 <_reclaim_reent+0x16>
 80047f2:	69e3      	ldr	r3, [r4, #28]
 80047f4:	4620      	mov	r0, r4
 80047f6:	68d9      	ldr	r1, [r3, #12]
 80047f8:	f000 f864 	bl	80048c4 <_free_r>
 80047fc:	69e3      	ldr	r3, [r4, #28]
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	b111      	cbz	r1, 8004808 <_reclaim_reent+0x3c>
 8004802:	4620      	mov	r0, r4
 8004804:	f000 f85e 	bl	80048c4 <_free_r>
 8004808:	6961      	ldr	r1, [r4, #20]
 800480a:	b111      	cbz	r1, 8004812 <_reclaim_reent+0x46>
 800480c:	4620      	mov	r0, r4
 800480e:	f000 f859 	bl	80048c4 <_free_r>
 8004812:	69e1      	ldr	r1, [r4, #28]
 8004814:	b111      	cbz	r1, 800481c <_reclaim_reent+0x50>
 8004816:	4620      	mov	r0, r4
 8004818:	f000 f854 	bl	80048c4 <_free_r>
 800481c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800481e:	b111      	cbz	r1, 8004826 <_reclaim_reent+0x5a>
 8004820:	4620      	mov	r0, r4
 8004822:	f000 f84f 	bl	80048c4 <_free_r>
 8004826:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004828:	b111      	cbz	r1, 8004830 <_reclaim_reent+0x64>
 800482a:	4620      	mov	r0, r4
 800482c:	f000 f84a 	bl	80048c4 <_free_r>
 8004830:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004832:	b111      	cbz	r1, 800483a <_reclaim_reent+0x6e>
 8004834:	4620      	mov	r0, r4
 8004836:	f000 f845 	bl	80048c4 <_free_r>
 800483a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800483c:	b111      	cbz	r1, 8004844 <_reclaim_reent+0x78>
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f840 	bl	80048c4 <_free_r>
 8004844:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004846:	b111      	cbz	r1, 800484e <_reclaim_reent+0x82>
 8004848:	4620      	mov	r0, r4
 800484a:	f000 f83b 	bl	80048c4 <_free_r>
 800484e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004850:	b111      	cbz	r1, 8004858 <_reclaim_reent+0x8c>
 8004852:	4620      	mov	r0, r4
 8004854:	f000 f836 	bl	80048c4 <_free_r>
 8004858:	6a23      	ldr	r3, [r4, #32]
 800485a:	b14b      	cbz	r3, 8004870 <_reclaim_reent+0xa4>
 800485c:	4620      	mov	r0, r4
 800485e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004862:	4718      	bx	r3
 8004864:	680e      	ldr	r6, [r1, #0]
 8004866:	4620      	mov	r0, r4
 8004868:	f000 f82c 	bl	80048c4 <_free_r>
 800486c:	4631      	mov	r1, r6
 800486e:	e7bb      	b.n	80047e8 <_reclaim_reent+0x1c>
 8004870:	bd70      	pop	{r4, r5, r6, pc}
 8004872:	bf00      	nop
 8004874:	20000010 	.word	0x20000010

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	2600      	movs	r6, #0
 800487c:	4d0c      	ldr	r5, [pc, #48]	@ (80048b0 <__libc_init_array+0x38>)
 800487e:	4c0d      	ldr	r4, [pc, #52]	@ (80048b4 <__libc_init_array+0x3c>)
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	f000 f870 	bl	800496c <_init>
 800488c:	2600      	movs	r6, #0
 800488e:	4d0a      	ldr	r5, [pc, #40]	@ (80048b8 <__libc_init_array+0x40>)
 8004890:	4c0a      	ldr	r4, [pc, #40]	@ (80048bc <__libc_init_array+0x44>)
 8004892:	1b64      	subs	r4, r4, r5
 8004894:	10a4      	asrs	r4, r4, #2
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	08004a30 	.word	0x08004a30
 80048b4:	08004a30 	.word	0x08004a30
 80048b8:	08004a30 	.word	0x08004a30
 80048bc:	08004a34 	.word	0x08004a34

080048c0 <__retarget_lock_acquire_recursive>:
 80048c0:	4770      	bx	lr

080048c2 <__retarget_lock_release_recursive>:
 80048c2:	4770      	bx	lr

080048c4 <_free_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4605      	mov	r5, r0
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d040      	beq.n	800494e <_free_r+0x8a>
 80048cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d0:	1f0c      	subs	r4, r1, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfb8      	it	lt
 80048d6:	18e4      	addlt	r4, r4, r3
 80048d8:	f000 f83c 	bl	8004954 <__malloc_lock>
 80048dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <_free_r+0x8c>)
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	b933      	cbnz	r3, 80048f0 <_free_r+0x2c>
 80048e2:	6063      	str	r3, [r4, #4]
 80048e4:	6014      	str	r4, [r2, #0]
 80048e6:	4628      	mov	r0, r5
 80048e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ec:	f000 b838 	b.w	8004960 <__malloc_unlock>
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	d908      	bls.n	8004906 <_free_r+0x42>
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	1821      	adds	r1, r4, r0
 80048f8:	428b      	cmp	r3, r1
 80048fa:	bf01      	itttt	eq
 80048fc:	6819      	ldreq	r1, [r3, #0]
 80048fe:	685b      	ldreq	r3, [r3, #4]
 8004900:	1809      	addeq	r1, r1, r0
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	e7ed      	b.n	80048e2 <_free_r+0x1e>
 8004906:	461a      	mov	r2, r3
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b10b      	cbz	r3, 8004910 <_free_r+0x4c>
 800490c:	42a3      	cmp	r3, r4
 800490e:	d9fa      	bls.n	8004906 <_free_r+0x42>
 8004910:	6811      	ldr	r1, [r2, #0]
 8004912:	1850      	adds	r0, r2, r1
 8004914:	42a0      	cmp	r0, r4
 8004916:	d10b      	bne.n	8004930 <_free_r+0x6c>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	4401      	add	r1, r0
 800491c:	1850      	adds	r0, r2, r1
 800491e:	4283      	cmp	r3, r0
 8004920:	6011      	str	r1, [r2, #0]
 8004922:	d1e0      	bne.n	80048e6 <_free_r+0x22>
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4408      	add	r0, r1
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	e7da      	b.n	80048e6 <_free_r+0x22>
 8004930:	d902      	bls.n	8004938 <_free_r+0x74>
 8004932:	230c      	movs	r3, #12
 8004934:	602b      	str	r3, [r5, #0]
 8004936:	e7d6      	b.n	80048e6 <_free_r+0x22>
 8004938:	6820      	ldr	r0, [r4, #0]
 800493a:	1821      	adds	r1, r4, r0
 800493c:	428b      	cmp	r3, r1
 800493e:	bf01      	itttt	eq
 8004940:	6819      	ldreq	r1, [r3, #0]
 8004942:	685b      	ldreq	r3, [r3, #4]
 8004944:	1809      	addeq	r1, r1, r0
 8004946:	6021      	streq	r1, [r4, #0]
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	6054      	str	r4, [r2, #4]
 800494c:	e7cb      	b.n	80048e6 <_free_r+0x22>
 800494e:	bd38      	pop	{r3, r4, r5, pc}
 8004950:	200012dc 	.word	0x200012dc

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	@ (800495c <__malloc_lock+0x8>)
 8004956:	f7ff bfb3 	b.w	80048c0 <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	200012d8 	.word	0x200012d8

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	@ (8004968 <__malloc_unlock+0x8>)
 8004962:	f7ff bfae 	b.w	80048c2 <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	200012d8 	.word	0x200012d8

0800496c <_init>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr

08004978 <_fini>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr
